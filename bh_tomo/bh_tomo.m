function bh_tomo

file = '';
rep = '';


fs = 11;
vScale = 1;
if ispc
    fs = 9;
    vScale = 0.81;
end


nbutton = 11;

width = 400;
height = (185+nbutton*40)*vScale;
% get screen size
su = get(groot,'Units');
set(groot,'Units','points')
scnsize = get(groot,'ScreenSize');
pos = [scnsize(3)/2-width/2 scnsize(4)/2-height/2 width height];
set(groot,'Units',su)       % Restore default root screen units


f = figure('Visible','off',...
    'Units','points',...
    'Position',pos,...
    'Tag','fig_bh_tomo2',...
    'Name','bh_tomo',...
    'NumberTitle','off',...
    'Resize','off',...
    'ToolBar','none',...,
    'MenuBar','None',...
    'CloseRequestFcn',@closeWindow);

ha = gobjects(nbutton,1);

ha(1) = uicontrol('Style','pushbutton',...
    'String','Magnetic Nano Fluid Saturation',...
    'Units','points',...
    'FontSize',fs+1,...
    'HorizontalAlignment','center',...
    'Position',[40 40*vScale 320 35*vScale],...
    'Visible','off',...
    'Enable','on',...
    'Callback',@nanofluid,...
    'Parent',f);

ha(2) = uicontrol('Style','pushbutton',...
    'String','Time-lapse Visualization',...
    'Units','points',...
    'FontSize',fs+1,...
    'HorizontalAlignment','center',...
    'Position',[40 2*40*vScale 320 35*vScale],...
    'Visible','off',...
    'Enable','on',...
    'Callback',@timelapse,...
    'Parent',f);

ha(3) = uicontrol('Style','pushbutton',...
    'String','Time-lapse Inversion',...
    'Units','points',...
    'FontSize',fs+1,...
    'HorizontalAlignment','center',...
    'Position',[40 3*40*vScale 320 35*vScale],...
    'Enable','on',...
    'Callback',@tltomo,...
    'Parent',f);

ha(4) = uicontrol('Style','pushbutton',...
    'String','Interpretation (GPR)',...
    'Units','points',...
    'FontSize',fs+1,...
    'HorizontalAlignment','center',...
    'Position',[40 4*40*vScale 320 35*vScale],...
    'Enable','on',...
    'Callback',@interp,...
    'Parent',f);

ha(5) = uicontrol('Style','pushbutton',...
    'String','Inversion',...
    'Units','points',...
    'FontSize',fs+1,...
    'HorizontalAlignment','center',...
    'Position',[40 5*40*vScale 320 35*vScale],...
    'Enable','on',...
    'Callback',@inv,...
    'Parent',f);

ha(6) = uicontrol('Style','pushbutton',...
    'String','Covariance Model',...
    'Units','points',...
    'FontSize',fs+1,...
    'HorizontalAlignment','center',...
    'Position',[40 6*40*vScale 320 35*vScale],...
    'Enable','on',...
    'Callback',@fitCovar,...
    'Parent',f);

ha(7) = uicontrol('Style','pushbutton',...
    'String','Manual Amplitude Picking',...
    'Units','points',...
    'FontSize',fs+1,...
    'HorizontalAlignment','center',...
    'Position',[40 7*40*vScale 320 35*vScale],...
    'Enable','on',...
    'Callback',@amp,...
    'Parent',f);

ha(8) = uicontrol('Style','pushbutton',...
    'String','Manual Traveltime Picking',...
    'Units','points',...
    'FontSize',fs+1,...
    'HorizontalAlignment','center',...
    'Position',[40 8*40*vScale 320 35*vScale],...
    'Enable','on',...
    'Callback',@tt,...
    'Parent',f);

ha(9) = uicontrol('Style','pushbutton',...
    'String','Automatic Traveltime Picking (AIC-CWT)',...
    'Units','points',...
    'FontSize',fs+1,...
    'HorizontalAlignment','center',...
    'Position',[40 9*40*vScale 320 35*vScale],...
    'Visible','off',...
    'Enable','on',...
    'Callback',@phase_pick,...
    'Parent',f);

ha(10) = uicontrol('Style','pushbutton',...
    'String','Semi-Automatic Traveltime Picking (x-corr)',...
    'Units','points',...
    'FontSize',fs+1,...
    'HorizontalAlignment','center',...
    'Position',[40 10*40*vScale 320 35*vScale],...
    'Enable','on',...
    'Callback',@pick,...
    'Parent',f);

ha(11) = uicontrol('Style','pushbutton',...
    'String','Database',...
    'Units','points',...
    'FontSize',fs+1,...
    'HorizontalAlignment','center',...
    'Position',[40 11*40*vScale 320 35*vScale],...
    'Callback',@db,...
    'Parent',f);

nvisible = 0;
for nb=1:nbutton
    if strcmp(ha(nb).Visible, 'on')
        nvisible = nvisible + 1;
        ha(nb).Position = [40 nvisible*40*vScale 320 35*vScale];
    end
end

height = (185+nvisible*40)*vScale;
pos = [scnsize(3)/2-width/2 scnsize(4)/2-height/2 width height];
f.Position = pos;

hdbname = uicontrol('Style','text',...
    'String','',...
    'Units','points',...
    'FontSize',fs+1,...
    'HorizontalAlignment','center',...
    'Position',[40 (nvisible+1.5)*40*vScale 320 35*vScale],...
    'BackgroundColor',[1 1 1],...
    'Parent',f);

uicontrol('Style','text',...
    'String',{'BH TOMO','Borehole Radar/Seismic Data Processing Center'},...
    'Units','points',...
    'FontSize',fs+2,...
    'FontWeight','bold',...
    'HorizontalAlignment','center',...
    'Position',[40 (nvisible+3)*40*vScale 320 35*vScale],...
    'ForegroundColor',[1 0 0],...
    'Parent',f);

hmenu = uimenu(f,'Label','File');
uimenu(hmenu,'Label','Choose Database ...',...
    'Accelerator','O',...
    'Callback',@chooseDB);
uimenu(hmenu,'Label','Close',...
    'Separator','on',...
    'Accelerator','W',...
    'Callback',@closeWindow);

hmenu2 = uimenu(f,'Label','Edit');
uimenu(hmenu2,'Label','Convert Database ...',...
    'Accelerator','C',...
    'Callback',@convertDB);


f.Visible = 'on';

    function closeWindow(varargin)
        delete(f)
    end

    function chooseDB(varargin)
        [file, rep] = uigetfile('*.mat','Open Database');
        if isequal(file,0)
            return
        end
        hdbname.String = char(file);
    end
    function db(varargin)
        bh_tomo2_db(rep,file,fs);
    end
    function pick(varargin)
        bh_tomo_pick( 'UserData', [rep,file] )
    end
    function phase_pick(varargin)
    end
    function tt(varargin)
        bh_tomo_tt( 'UserData', [rep,file] )
    end
    function amp(varargin)
        bh_tomo_amp( 'UserData', [rep,file] )
    end
    function fitCovar(varargin)
        bh_tomo2_covar(rep,file,fs);
    end
    function inv(varargin)
        bh_tomo2_inv(rep,file,fs);
    end
    function interp(varargin)
        bh_tomo2_interp(rep,file,fs);
    end
    function tltomo(varargin)
        bh_tomo2_tlinv(rep,file,fs);
    end
    function timelapse(varargin)
        bh_tomo2_tlvisu(rep,file,fs);
    end
    function nanofluid(varargin)
    end

    function convertDB(varargin)
        if isempty(file)
            warndlg('Choose a Database First')
            return
        end
        
        tmp = load([rep,file]);
        
        % air shots
        air = AirShots.empty(0,numel(tmp.air));
        try
            for n=1:numel(tmp.air)
                air(n) = AirShots(tmp.air(n));
            end
        catch ME
            errordlg({'Database not in right format:',ME.message})
            return
        end
        
        %boreholes
        if isfield(tmp, 'boreholes')
            boreholes = Borehole.empty(0,numel(tmp.boreholes));
            try
                for n=1:numel(tmp.boreholes)
                    boreholes(n) = Borehole(tmp.boreholes(n));
                end
            catch ME
                errordlg({'Database not in right format:',ME.message})
                return
            end
        elseif isfield(tmp, 'forages')
            boreholes = Borehole.empty(0,numel(tmp.forages));
            try
                for n=1:numel(tmp.forages)
                    boreholes(n) = Borehole(tmp.forages(n));
                end
            catch ME
                errordlg({'Database not in right format:',ME.message})
                return
            end
        else
            errordlg({'Borehole data not found in database'})
                return
        end
        % MOGs
        mogs = Mog.empty(0,numel(tmp.mogs));
        names_mog = cell(size(mogs));
        try
            for n=1:numel(tmp.mogs)
                mogs(n) = Mog(tmp.mogs(n));
                names_mog{n} = mogs(n).name;
            end
        catch ME
            errordlg({'Database not in right format:',ME.message})
            return
        end
        
        %
        % Models
        if isfield(tmp, 'panels')
            models = Model.empty(0,numel(tmp.panels)); 
            try
                for n=1:numel(tmp.panels)
                    models(n) = Model(tmp.panels(n));
                end
            catch ME
                errordlg({'Database not in right format:',ME.message})
                return
            end
        elseif isfield(tmp, 'panneaux')
            models = Model.empty(0,numel(tmp.panneaux)); 
            try
                for n=1:numel(tmp.panneaux)
                    models(n) = Model(tmp.panneaux(n));
                end
            catch ME
                errordlg({'Database not in right format:',ME.message})
                return
            end
        else
            errordlg({'Model data not found in database'})
                return
        end

        auto_pick = tmp.auto_pick; %#ok<NASGU>
        
        [file2, rep2] = uiputfile('*.mat','Save New Database');
        if isequal(file2,0)
            return
        end
        file=file2;
        rep=rep2;
        save([rep,file],'names_mog','mogs','air','boreholes','models','auto_pick')
        hdbname.String = char(file);
    end

end

