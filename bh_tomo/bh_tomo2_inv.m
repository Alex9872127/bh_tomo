function bh_tomo2_inv( varargin )
%BH_TOMO2_INV Perform tomographic inversion

rep='';
file='';
if nargin>=2
    rep=varargin{1};
    file=varargin{2};
end

% Main variables

cm = CovarianceModel.empty;
cmUI = CovarianceUI.empty;
cmXiUI = CovarianceUI.empty;
cmTiltUI = CovarianceUI.empty;
modelNo = [];
model = [];
saved = true;
previousTypeData = 1;
previousTypeInv = 1;
tomo = [];
param = [];
gridViewer = [];

cminAmp = 1;
cmaxAmp = 3;
cminTT = 0.06;
cmaxTT = 0.12;

fs = 11;
if nargin>=3
    fs = varargin{3};
elseif ispc
    fs = 9;
end
vScale = 1;
if ispc
    vScale = 0.81;
end

width = 1400;
height = 875*vScale;
% get screen size
su = get(groot,'Units');
set(groot,'Units','points')
scnsize = get(groot,'ScreenSize');
pos = [scnsize(3)/2-width/2 scnsize(4)/2-height/2 width height];
set(groot,'Units',su)       % Restore default root screen units

f = figure('Visible','off',...
    'Units','points',...
    'Position',pos,...
    'Tag','fig_bh_tomo2_inv',...
    'Name','bh_tomo_inv',...
    'NumberTitle','off',...
    'ToolBar','none',...,
    'MenuBar','None',...
    'SizeChangedFcn',@resizeUI,...
    'CloseRequestFcn',@closeWindow);

%
% Menu
%
hmenu = uimenu(f,'Label','File');
uimenu(hmenu,'Label','Open ...',...
    'Accelerator','O',...
    'Callback',@openFile);
uimenu(hmenu,'Label','Save',...
    'Accelerator','S',...
    'Callback',@saveFile);
uimenu(hmenu,'Label','Close',...
    'Separator','on',...
    'Accelerator','W',...
    'Callback',@closeWindow);
%hinvMenu = uimenu(f,'Label','Inversion');
hresultsMenu = uimenu(f,'Label','Results');
uimenu(hresultsMenu,'Label','Export ...',...
    'Accelerator','E',...
    'Callback',@exportTomo);
uimenu(hresultsMenu,'Label','Tomogram',...
    'Accelerator','T',...
    'Callback',@showTomo);
uimenu(hresultsMenu,'Label','Simulations',...
    'Accelerator','G',...
    'Callback',@showSim);
uimenu(hresultsMenu,'Label','Rays',...
    'Accelerator','R',...
    'Callback',@showRays);
uimenu(hresultsMenu,'Label','Ray Density',...
    'Accelerator','D',...
    'Callback',@showRayDensity);
uimenu(hresultsMenu,'Label','Residuals',...
    'Accelerator','L',...
    'Callback',@showResiduals);
%hdataMenu = uimenu(f,'Label','Data');

%
% Main Panels
%

pdata = uipanel(f,'Title','Data',...
    'Units','points',...
    'FontSize',fs+1);
pgrid = uipanel(f,'Title','Grid',...
    'Units','points',...
    'FontSize',fs+1);
pprevious = uipanel(f,'Title','Previous Inversion',...
    'Units','points',...
    'FontSize',fs+1);
pinv = uipanel(f,'Title','Inversion Parameters',...
    'Units','points',...
    'FontSize',fs+1);
pfig = uipanel(f,'Title','Figures',...
    'Units','points',...
    'FontSize',fs+1);

hmessage = uicontrol('Style','text',...
    'ForegroundColor','red',...
    'BackgroundColor','white',...
    'FontSize',fs+1,...
    'Units','points',...
    'Parent',f);

nLines=5;
vSizeTot = nLines*22 + (nLines+1)*5;
vSize = 22/vSizeTot;
vSpace = 5/vSizeTot;

% Data

hmodelName = uicontrol('Style','text',...
    'String','Model: ',...
    'ForegroundColor','red',...
    'FontSize',fs+1,...
    'Units','normalized',...
    'Position',[0.03 3.5*vSize+5*vSpace 0.47 vSize],...
    'Parent',pdata);
htypeData = uicontrol('Style','popupmenu',...
    'String',{'Traveltime','Amplitude - Peak-to-Peak','Amplitude - Centroid Frequency'},...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.03 2*vSize+3*vSpace 0.47 vSize],...
    'Callback',@changeTypeData,...
    'Parent',pdata);
huseCont = uicontrol('Style','checkbox',...
    'String','Use Constraints',...
    'Value',1,...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.03 2*vSpace 0.47 vSize],...
    'Parent',pdata);
hlistMog = uicontrol('Style','listbox',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.516 vSpace 0.47 4*vSize+4*vSpace],...
    'Parent',pdata);
uicontrol('Style','text',...
    'String','Select Mog',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.516 4*vSize+5*vSpace 0.47 vSize],...
    'Parent',pdata);

% Grid

nLines=3;
vSizeTot = nLines*22 + (nLines+1)*5;
vSize = 22/vSizeTot;
vSpace = 5/vSizeTot;

hncells = uicontrol('Style','text',...
    'String',' Cells',...
    'ForegroundColor','red',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.5 vSpace 0.5 vSize],...
    'Parent',pgrid);

uicontrol('Style','text',...
    'String','Max',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','right',...
    'Position',[0.005 vSpace 0.12 vSize],...
    'Parent',pgrid);
hxmax = uicontrol('Style','text',...
    'String','0',...
    'ForegroundColor','red',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.125 vSpace 0.12 vSize],...
    'Parent',pgrid);
hymax = uicontrol('Style','text',...
    'String','0',...
    'ForegroundColor','red',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.25 vSpace 0.12 vSize],...
    'Parent',pgrid);
hzmax = uicontrol('Style','text',...
    'String','0',...
    'ForegroundColor','red',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.375 vSpace 0.12 vSize],...
    'Parent',pgrid);

uicontrol('Style','text',...
    'String','Min',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','right',...
    'Position',[0.005 2*vSpace+vSize 0.12 vSize],...
    'Parent',pgrid);
hxmin = uicontrol('Style','text',...
    'String','0',...
    'ForegroundColor','red',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.125 2*vSpace+vSize 0.12 vSize],...
    'Parent',pgrid);
hymin = uicontrol('Style','text',...
    'String','0',...
    'ForegroundColor','red',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.25 2*vSpace+vSize 0.12 vSize],...
    'Parent',pgrid);
hzmin = uicontrol('Style','text',...
    'String','0',...
    'ForegroundColor','red',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.375 2*vSpace+vSize 0.12 vSize],...
    'Parent',pgrid);

uicontrol('Style','text',...
    'String','X',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.125 3*vSpace+2*vSize 0.12 vSize],...
    'Parent',pgrid);
uicontrol('Style','text',...
    'String','Y',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.25 3*vSpace+2*vSize 0.12 vSize],...
    'Parent',pgrid);
uicontrol('Style','text',...
    'String','Z',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.375 3*vSpace+2*vSize 0.12 vSize],...
    'Parent',pgrid);

uicontrol('Style','text',...
    'String','X',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.62 3*vSpace+2*vSize 0.12 vSize],...
    'Parent',pgrid);
uicontrol('Style','text',...
    'String','Y',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.745 3*vSpace+2*vSize 0.12 vSize],...
    'Parent',pgrid);
uicontrol('Style','text',...
    'String','Z',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.87 3*vSpace+2*vSize 0.12 vSize],...
    'Parent',pgrid);

uicontrol('Style','text',...
    'String','Step ',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','right',...
    'Position',[0.49 2*vSpace+vSize 0.11 vSize],...
    'Parent',pgrid);
hdx = uicontrol('Style','text',...
    'String','0',...
    'ForegroundColor','red',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.62 2*vSpace+vSize 0.12 vSize],...
    'Parent',pgrid);
hdy = uicontrol('Style','text',...
    'String','0',...
    'ForegroundColor','red',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.745 2*vSpace+vSize 0.12 vSize],...
    'Parent',pgrid);
hdz = uicontrol('Style','text',...
    'String','0',...
    'ForegroundColor','red',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.87 2*vSpace+vSize 0.12 vSize],...
    'Parent',pgrid);


% Previous Inversions

nLines=2;
vSizeTot = nLines*22 + (nLines+1)*5;
vSize = 22/vSizeTot;
vSpace = 5/vSizeTot;

hpreviousInv = uicontrol('Style','popupmenu',...
    'String','-',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.025 2*vSpace+vSize 0.6 vSize],...
    'Parent',pprevious);
huseRays = uicontrol('Style','checkbox',...
    'String','Use Rays',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.675 2*vSpace+vSize 0.3 vSize],...
    'Parent',pprevious);
uicontrol('Style','pushbutton',...
    'String','View',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.025 vSpace 0.3 vSize],...
    'Callback',@viewPrevious,...
    'Parent',pprevious);
uicontrol('Style','pushbutton',...
    'String','Delete',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.35 vSpace 0.3 vSize],...
    'Callback',@deletePrevious,...
    'Parent',pprevious);
uicontrol('Style','pushbutton',...
    'String','Load',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.675 vSpace 0.3 vSize],...
    'Callback',@loadPrevious,...
    'Parent',pprevious);


% Inversion params

nLines=18;
vSizeTot = nLines*22 + (nLines+1)*5;
vSize = 22/vSizeTot;
vSpace = 5/vSizeTot;

uicontrol('Style','pushbutton',...
    'String','GO',...
    'FontSize',fs+1,...
    'FontWeight','bold',...
    'Units','normalized',...
    'Position',[0.3 vSpace 0.4 vSize],...
    'Callback',@doInv,...
    'Parent',pinv);
pgeostat = uipanel(pinv,'Title','Geostatistical Inversion',...
    'Units','normalized',...
    'Position',[0.025 2*vSpace+1*vSize 0.95 14*vSize+14*vSpace],...
    'FontSize',fs,...
    'Visible','on');
plsqr = uipanel(pinv,'Title','LSQR Solver',...
    'Units','normalized',...
    'Position',[0.025 2*vSpace+1*vSize 0.95 14*vSize+14*vSpace],...
    'FontSize',fs,...
    'Visible','off');
pnumit = uipanel(pinv,'Title','Number of Iterations',...
    'Units','normalized',...
    'Position',[0.025 16*vSpace+15*vSize 0.95 1.5*vSize+2*vSpace],...
    'FontSize',fs);

uicontrol('Style','text',...
    'String','Algorithm',...
    'Units','normalized',...
    'HorizontalAlignment','right',...
    'Position',[0.1 18*vSpace+16.75*vSize 0.3 vSize],...
    'Parent',pinv);
htypeInv = uicontrol('Style','popupmenu',...
    'String',{'Geostatistic','LSQR Solver'},...
    'Units','normalized',...
    'Position',[0.45 18*vSpace+16.75*vSize 0.4 vSize],...
    'Callback',@changeTypeInv,...
    'Parent',pinv);

nLines=1;
vSizeTot = nLines*22 + 2*5;
vSize = 22/vSizeTot;
vSpace = 5/vSizeTot;

uicontrol('Style','text',...
    'String','Straight Rays',...
    'Units','normalized',...
    'HorizontalAlignment','right',...
    'Position',[0.12 vSpace 0.2 vSize],...
    'Parent',pnumit);
hnStraight = uicontrol('Style','edit',...
    'String','1',...
    'Units','normalized',...
    'Position',[0.34 vSpace 0.15 vSize],...
    'Parent',pnumit);
uicontrol('Style','text',...
    'String','Curved Rays',...
    'Units','normalized',...
    'HorizontalAlignment','right',...
    'Position',[0.51 vSpace 0.2 vSize],...
    'Parent',pnumit);
hnCurved = uicontrol('Style','edit',...
    'String','1',...
    'Units','normalized',...
    'Position',[0.73 vSpace 0.15 vSize],...
    'Parent',pnumit);


nLines=16;
vSizeTot = nLines*22 + (6+1)*5;
vSize = 22/vSizeTot;
vSpace = 5/vSizeTot;

pnugget = uipanel(pgeostat,'Title','Nugget Effect',...
    'Units','normalized',...
    'Position',[0.025 vSpace 0.95 3*vSize],...
    'FontSize',fs);
pparams = uipanel(pgeostat,'Title','Parameters',...
    'Units','normalized',...
    'Position',[0.025 2*vSpace+3*vSize 0.95 10*vSize],...
    'FontSize',fs);

hstructList = uicontrol('Style','popupmenu',...
    'String',{'Structure No 1'},...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.625 4*vSpace+13*vSize 0.35 vSize],...
    'Parent',pgeostat);
hvariance = uicontrol('Style','checkbox',...
    'String','Include Experimental Variance',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.025 4*vSpace+13*vSize 0.45 vSize],...
    'Parent',pgeostat);
helliptical = uicontrol('Style','checkbox',...
    'String','Elliptical Velocity Anisotropy',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.025 5*vSpace+14*vSize 0.45 vSize],...
    'Callback',@doElliptical,...
    'Parent',pgeostat);
htilted = uicontrol('Style','checkbox',...
    'String','Tilted Elliptical Vel. Anisotropy',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.5 5*vSpace+14*vSize 0.45 vSize],...
    'Callback',@doTilted,...
    'Parent',pgeostat);
hdoSim = uicontrol('Style','checkbox',...
    'String','Simulations',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.025 6*vSpace+15*vSize 0.25 vSize],...
    'Callback',@doSim,...
    'Parent',pgeostat);
uicontrol('Style','text',...
    'String','Number of Simulations ',...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Position',[0.475 6*vSpace+15*vSize 0.35 vSize],...
    'Parent',pgeostat);
hnSim = uicontrol('Style','edit',...
    'String','128',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.825 6*vSpace+15*vSize 0.15 vSize],...
    'Callback',@checkNsim,...
    'Parent',pgeostat);

nLines=2;
vSizeTot = nLines*22 + (nLines+1)*5;
vSize = 22/vSizeTot;
vSpace = 5/vSizeTot;

uicontrol('Style','text',...
    'String','Slowness',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','right',...
    'Position',[0.01 2*vSpace+vSize 0.25 vSize],...
    'Parent',pnugget);
hmodelNugget = uicontrol('Style','edit',...
    'String','0',...
    'FontSize',fs,...
    'Units','normalized',...
    'Callback',@updateCovPar,...
    'Position',[0.28 2*vSpace+vSize 0.15 vSize],...
    'Parent',pnugget);
uicontrol('Style','text',...
    'String','Traveltime',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','right',...
    'Position',[0.51 2*vSpace+vSize 0.25 vSize],...
    'Parent',pnugget);
httNugget = uicontrol('Style','edit',...
    'String','0',...
    'FontSize',fs,...
    'Units','normalized',...
    'Callback',@updateCovPar,...
    'Position',[0.78 2*vSpace+vSize 0.15 vSize],...
    'Parent',pnugget);
hxiText = uicontrol('Style','text',...
    'String',char(958),...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','right',...
    'Visible','off',...
    'Position',[0.01 vSpace 0.25 vSize],...
    'Parent',pnugget);
hxiNugget = uicontrol('Style','edit',...
    'String','0',...
    'FontSize',fs,...
    'Units','normalized',...
    'Callback',@updateCovPar,...
    'Visible','off',...
    'Position',[0.28 vSpace 0.15 vSize],...
    'Parent',pnugget);
htiltText = uicontrol('Style','text',...
    'String','Tilt Angle',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','right',...
    'Visible','off',...
    'Position',[0.51 vSpace 0.25 vSize],...
    'Parent',pnugget);
htiltNugget = uicontrol('Style','edit',...
    'String','0',...
    'FontSize',fs,...
    'Units','normalized',...
    'Callback',@updateCovPar,...
    'Visible','off',...
    'Position',[0.78 vSpace 0.15 vSize],...
    'Parent',pnugget);


nLines=9;
vSizeTot = nLines*22 + (nLines+1)*5;
vSize = 22/vSizeTot;
vSpace = 5/vSizeTot;

hvar = uicontrol('Style','text',...
    'String','Variable',...
    'FontSize',fs,...
    'HorizontalAlignment','center',...
    'BackgroundColor','white',...
    'Units','normalized',...
    'Position',[0.23 9*vSpace+8*vSize 0.23 vSize],...
    'Visible','off',...
    'Parent',pparams);
hxi = uicontrol('Style','text',...
    'String',char(958),...
    'FontSize',fs,...
    'HorizontalAlignment','center',...
    'BackgroundColor','white',...
    'Units','normalized',...
    'Position',[0.49 9*vSpace+8*vSize 0.23 vSize],...
    'Visible','off',...
    'Parent',pparams);
htilt = uicontrol('Style','text',...
    'String','Tile Angle',...
    'FontSize',fs,...
    'HorizontalAlignment','center',...
    'BackgroundColor','white',...
    'Units','normalized',...
    'Position',[0.74 9*vSpace+8*vSize 0.23 vSize],...
    'Visible','off',...
    'Parent',pparams);
hsillText = uicontrol('Style','text',...
    'String','Sill',...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Visible','off',...
    'Parent',pparams);
hthetaZtext = uicontrol('Style','text',...
    'String',[char(952),' Z'],...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Visible','off',...
    'Parent',pparams);
hthetaYtext = uicontrol('Style','text',...
    'String',[char(952),' Y'],...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Visible','off',...
    'Parent',pparams);
hthetaXtext = uicontrol('Style','text',...
    'String',[char(952),' X'],...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Visible','off',...
    'Parent',pparams);
hrangeZtext = uicontrol('Style','text',...
    'String','Range Z',...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Visible','off',...
    'Parent',pparams);
hrangeYtext = uicontrol('Style','text',...
    'String','Range Y',...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Visible','off',...
    'Parent',pparams);
hrangeXtext = uicontrol('Style','text',...
    'String','Range X',...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Visible','off',...
    'Parent',pparams);


nLines=1;
vSizeTot = nLines*22 + 2*5;
vSize = 22/vSizeTot;
vSpace = 5/vSizeTot;

hcolorbar = uicontrol('Style','checkbox',...
    'String','Set Color Limits',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.02 vSpace 0.12 vSize],...
    'Callback',@doColorbar,...
    'Parent',pfig);
uicontrol('Style','text',...
    'String','Min: ',...
    'HorizontalAlignment','right',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.15 vSpace 0.04 vSize],...
    'Parent',pfig)
hcmin = uicontrol('Style','edit',...
    'String','0.06',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.2 vSpace 0.07 vSize],...
    'Callback',@setClim,...
    'Parent',pfig);
uicontrol('Style','text',...
    'String','Max: ',...
    'HorizontalAlignment','right',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.28 vSpace 0.04 vSize],...
    'Parent',pfig)
hcmax = uicontrol('Style','edit',...
    'String','0.12',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.33 vSpace 0.07 vSize],...
    'Callback',@setClim,...
    'Parent',pfig);

m = {'viridis','plasma','magma','inferno','cmr','polarmap','parula','jet',...
    'hsv','hot','cool','autumn','spring','winter',...
    'summer','gray','bone','copper','pink','prism','flag','colorcube','lines'};

hcmap = uicontrol('Style','popupmenu',...
    'String',m,...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.41 vSpace 0.12 vSize],...
    'Callback',@doMap,...
    'Parent',pfig);
hsliderText = uicontrol('Style','text',...
    'String','Y Plane',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.54 vSpace 0.07 vSize],...
    'Visible','off',...
    'Parent',pfig);

nLines=14;
vSizeTot = nLines*22 + nLines*5;
vSize = 22/vSizeTot;
vSpace = 5/vSizeTot;

uicontrol('Style','text',...
    'String','Solver Tolerance ',...
    'HorizontalAlignment','right',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.02 13*vSpace+12*vSize 0.75 vSize],...
    'Parent',plsqr);
uicontrol('Style','text',...
    'String','Max Number of Solver Iterations ',...
    'HorizontalAlignment','right',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.02 12*vSpace+11*vSize 0.75 vSize],...
    'Parent',plsqr);
uicontrol('Style','text',...
    'String','Constraints Weight ',...
    'HorizontalAlignment','right',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.02 11*vSpace+10*vSize 0.75 vSize],...
    'Parent',plsqr);
uicontrol('Style','text',...
    'String','Smoothing Weight x',...
    'HorizontalAlignment','right',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.02 10*vSpace+9*vSize 0.75 vSize],...
    'Parent',plsqr);
uicontrol('Style','text',...
    'String','Smoothing Weight y',...
    'HorizontalAlignment','right',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.02 9*vSpace+8*vSize 0.75 vSize],...
    'Parent',plsqr);
uicontrol('Style','text',...
    'String','Smoothing Weight z',...
    'HorizontalAlignment','right',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.02 8*vSpace+7*vSize 0.75 vSize],...
    'Parent',plsqr);
uicontrol('Style','text',...
    'String','Smoothing Operator Order',...
    'HorizontalAlignment','right',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.02 7*vSpace+6*vSize 0.75 vSize],...
    'Parent',plsqr);
uicontrol('Style','text',...
    'String','Max Velocity Variation per Iteration [%] ',...
    'HorizontalAlignment','right',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.02 6*vSpace+5*vSize 0.75 vSize],...
    'Parent',plsqr);

htolLSQR = uicontrol('Style','edit',...
    'String','1e-6',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.8 13*vSpace+12*vSize 0.15 vSize],...
    'Parent',plsqr);
hnitLSQR = uicontrol('Style','edit',...
    'String','100',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.8 12*vSpace+11*vSize 0.15 vSize],...
    'Parent',plsqr);
hwContLSQR = uicontrol('Style','edit',...
    'String','1',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.8 11*vSpace+10*vSize 0.15 vSize],...
    'Parent',plsqr);
halphaxLSQR = uicontrol('Style','edit',...
    'String','10',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.8 10*vSpace+9*vSize 0.15 vSize],...
    'Parent',plsqr);
halphayLSQR = uicontrol('Style','edit',...
    'String','10',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.8 9*vSpace+8*vSize 0.15 vSize],...
    'Parent',plsqr);
halphazLSQR = uicontrol('Style','edit',...
    'String','10',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.8 8*vSpace+7*vSize 0.15 vSize],...
    'Parent',plsqr);
hopOrderLSQR = uicontrol('Style','popupmenu',...
    'String',{'1','2'},...
    'Value',2,...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.8 7*vSpace+6*vSize 0.15 vSize],...
    'Parent',plsqr);
hdeltamaxLSQR = uicontrol('Style','edit',...
    'String','50',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.8 6*vSpace+5*vSize 0.15 vSize],...
    'Parent',plsqr);


haxes1 = axes('Units','points','Parent',f,'Visible','on');
haxes2 = axes('Units','points','Parent',f,'Visible','off');
haxes3 = axes('Units','points','Parent',f,'Visible','off');
colormap(haxes1, 'viridis')
colormap(haxes2, 'viridis')
colormap(haxes3, 'viridis')

f.Visible = 'on';


    function resizeUI(varargin)
        f.Visible = 'off';
        hBorder = 15;
        width = f.Position(3);
        height = f.Position(4);
        
        vFac = 1;
        if ispc
            vFac = 0.81*vFac;
        end
%        vFac = 0.95;
        
        vSize = 22*vFac;
        vSpace = 5*vFac;
        vBorder = 10*vFac;
        
        axBorder = 60;%haxes1.Position(2);
        rBorder = 2*hBorder;
        hSize = 420;
        
        vSize2 = 5*vSize+6*vSpace;
        vPos = height-1.5*vBorder-vSize2;
        pdata.Position = [hBorder vPos hSize vSize2];

        vSize2 = 3*vSize+4*vSpace;
        vPos = vPos-vBorder-vSize2;
        pgrid.Position = [hBorder vPos hSize vSize2];
        
        vSize2 = 2.75*vSize+3*vSpace;
        vPos = vPos-vBorder-vSize2;
        pprevious.Position = [hBorder vPos hSize vSize2];
        
        vSize2 = 19*vSize+20*vSpace;
        vPos = vPos-vBorder-vSize2;
        pinv.Position = [hBorder vPos hSize vSize2];
        
        vSize2 = height-2*axBorder-4*vSize;
        hSize2 = width-(hBorder+hSize+axBorder+rBorder);
        
        hmessage.Position = [hBorder+hSize+axBorder height-2*vSize hSize2 vSize];
        pfig.Position = [hBorder+hSize+axBorder height-4.25*vSize hSize2 1.5*vSize+2*vSpace];
        
        haxes1.Position = [hBorder+hSize+axBorder axBorder hSize2 vSize2];
        
        f.Visible = 'on';
    end

    function closeWindow(varargin)
        if saved == false
            choice = questdlg('Database not saved, quit anyway?',...
                'bh_tomo_db',...
                'Don''t save','Cancel','Save','Save');
            switch choice
                case 'Don''t save'
                case 'Cancel'
                    return
                case 'Save'
                    saveFile()
            end
        end
        quitUI()
    end
    function quitUI(varargin)
        delete(f)
    end
    function saveFile(varargin)
        if isempty(model)
            return
        end
        
        if isempty(tomo)
            % save current model even if empty tomo,
            %    in case previous inversion were removed
            load([rep,file],'models')
            models(modelNo).inv_res = model.inv_res; %#ok<STRNU>
            save([rep,file],'models','-append')
            saved = true;
            return
        end
            
        switch htypeData.Value
            case 1
                dType = '-vel';
            otherwise
                dType = '-att';
        end
        switch htypeInv.Value
            case 1
                if param.cm.use_tilt==1
                    cov = '-tilted_aniso';
                elseif param.cm.use_xi==1
                    cov = '-ellipt_aniso';
                else
                    cov = '-geostat';
                end
            case 2
                cov = '-LSQR';
        end
        nameDefault = ['tomo(',tomo.date,')',dType,cov];  
        prompt = {'Inversion name:                                                               '};
        title = 'Save inversion results';
        nblines = 1;
        answer = myinputdlg(prompt,title,nblines,{nameDefault},'on');
        if ~isempty(answer)
            name=answer{1};
        else
            return
        end
        
        if isempty(model.inv_res)
            no_inv_res = 1;
        else
            flag=0;
            no_inv_res = 1+length(model.inv_res);
            for n=1:length(model.inv_res)
                if strcmp(model.inv_res(n).name, name)
                    no_inv_res = n;
                    flag = 1;
                    break;
                end
            end
            if flag==1
                answer=questdlg(['Overwrite ',name,'?']);
                if ~strcmp(answer,'Yes')
                    return
                end
            end
        end
        model.inv_res(no_inv_res).name = name;
        model.inv_res(no_inv_res).tomo = tomo;
        model.inv_res(no_inv_res).param = param;
        
        load([rep,file],'models')
        models(modelNo) = model; %#ok<NASGU>
        save([rep,file],'models','-append')
        saved = true;
        
        names = cell(numel(model.inv_res),1);
        for n=1:numel(model.inv_res)
            names{n} = model.inv_res(n).name;
        end
        hpreviousInv.String = names;
        
    end
    function openFile(varargin)
        [modelNo,file2,rep2] = chooseModel(rep,file);
        if isempty(modelNo)
            return
        end
        rep=rep2;
        file=file2;
        try
            load([rep,file],'models','mogs')
        catch ME
            errordlg(ME.message)
            return
        end
        model = models(modelNo);
        if isempty(model.grid)
            errordlg('Grid not created, inversion cannot be computed')
            return
        end
        
        %
        % Reset UI
        %
        cla(haxes1);cla(haxes2);cla(haxes3)
        cbh = findobj( 0, 'tag', 'Colorbar' );
        hsliderText.Visible = 'off';
        for i = 1: length(cbh)
            colorbar(cbh(i),'off')
        end

        mname = cell(numel(model.mogs),1);
        for n=1:numel(model.mogs)
            mname{n} = [mogs(model.mogs(n)).name,' - ',mogs(model.mogs(n)).date];
        end
        hlistMog.String = mname;
        hlistMog.Max = numel(model.mogs);
        hlistMog.Value = 1:numel(model.mogs);
        hmodelName.String = model.name;
        
        if ~isempty(model.inv_res)
            nr = cell(numel(model.inv_res),1);
            for n=1:numel(model.inv_res)
                nr{n} = model.inv_res(n).name;
            end
        else
            nr = cell(1);
            nr{1} = '-';
        end
        hpreviousInv.String = nr;
        hpreviousInv.Value = 1;
        huseRays.Value = 0;
        
        hxmin.String = num2str(model.grid.grx(1));
        hxmax.String = num2str(model.grid.grx(end));
        hdx.String = num2str(model.grid.dx());
        if strcmp(model.grid.type, '3D')
            hymin.String = num2str(model.grid.gry(1));
            hymax.String = num2str(model.grid.gry(end));
            hdy.String = num2str(model.grid.dy());
            helliptical.Enable = 'off';
        else
            hymin.String = '0';
            hymax.String = '0';
            hdy.String = '0';
            helliptical.Enable = 'on';
        end
        hzmin.String = num2str(model.grid.grz(1));
        hzmax.String = num2str(model.grid.grz(end));
        hdz.String = num2str(model.grid.dz());
        hncells.String = [num2str(model.grid.getNumberOfCells()),' Cells'];
        
        htypeData.Value = 1;
        gridViewer = GridViewer(model.grid);
        if strcmp(model.grid.type, '3D')
            hsliderText.Visible = 'on';
            gridViewer.createSliders('Parent',pfig,...
                'Units','normalized','Visible','off');
            nLines=1;
            vSizeTot = nLines*22 + 2*5;
            vSize = 22/vSizeTot;
            vSpace = 5/vSizeTot;
            gridViewer.slider1.Position = [0.64 vSpace 0.15 vSize];
            gridViewer.slider1.Visible = 'on';
            gridViewer.slider2.Position = [0.80 vSpace 0.15 vSize];
            if hdoSim.Value==1
                gridViewer.slider2.Visible = 'on';
            end
        end
        if ~isempty(model.tt_covar.covar)
            hvar.String = 'Slowness';
            cm = model.tt_covar;
            fillCovarUI()
        else
            if htypeInv.Value==1
                warndlg({'Covariance model parameters not defined',...
                'Use Covariance Model Estmation Module',...
                'Switching to LSQR'})
                htypeInv.Value = 2;
                changeTypeInv()
            end
        end
    end
    function fillCovarUI()
        
        delete(cmUI)
        delete(cmXiUI)
        delete(cmTiltUI)
        
        nLines = 9;
        vSizeTot = nLines*22 + (nLines+1)*5;
        vSize = 22/vSizeTot;
        vSpace = 5/vSizeTot;
        
        if strcmp(model.grid.type, '3D')
            hsillText.Position = [0.01 vSpace 0.21 vSize];
            hthetaZtext.Position = [0.01 2*vSpace+vSize 0.21 vSize];
            hthetaYtext.Position = [0.01 3*vSpace+2*vSize 0.21 vSize];
            hthetaXtext.Position = [0.01 4*vSpace+3*vSize 0.21 vSize];
            hrangeZtext.Position = [0.01 5*vSpace+4*vSize 0.21 vSize];
            hrangeYtext.Position = [0.01 6*vSpace+5*vSize 0.21 vSize];
            hrangeXtext.Position = [0.01 7*vSpace+6*vSize 0.21 vSize];
            hsillText.Visible = 'on';
            hthetaZtext.Visible = 'on';
            hthetaYtext.Visible = 'on';
            hthetaXtext.Visible = 'on';
            hrangeZtext.Visible = 'on';
            hrangeYtext.Visible = 'on';
            hrangeXtext.Visible = 'on';
        else
            hsillText.Position = [0.01 4*vSpace+3*vSize 0.21 vSize];
            hthetaXtext.Position = [0.01 5*vSpace+4*vSize 0.21 vSize];
            hrangeZtext.Position = [0.01 6*vSpace+5*vSize 0.21 vSize];
            hrangeXtext.Position = [0.01 7*vSpace+6*vSize 0.21 vSize];
            hsillText.Visible = 'on';
            hthetaZtext.Visible = 'off';
            hthetaYtext.Visible = 'off';
            hthetaXtext.Visible = 'on';
            hrangeZtext.Visible = 'on';
            hrangeYtext.Visible = 'off';
            hrangeXtext.Visible = 'on';
        end
        
        hvar.Visible = 'on';
        
        hstructList.Value = 1;
        nStruct = numel(cm.covar);
        sname = cell(nStruct,1);
        
        if strcmp(model.grid.type,'3D')
            cmUIpos = [0.23 0.5*vSpace 0.23 7*vSize+8*vSpace];
        else
            cmUIpos = [0.23 3.5*vSpace+3*vSize 0.23 4*vSize+5*vSpace];
        end
        for n=1:nStruct
            sname{n} = ['Structure no ',num2str(n)];
            cmUI(n) = CovarianceUI(cm.covar(n).range, cm.covar(n).angle, cm.covar(n).sill,...
                false,...
                'Units','normalized',...
                'Position',cmUIpos,...
                'Parent',pparams);
            cmUI(n).setVisible('off');
            
            cmUI(n).createList('Units','normalized',...
                'Position',[0.23 8*vSpace+7*vSize 0.23 vSize],...
                'Parent',pparams);
            cmUI(n).setType(cm.covar(n).type);
            addlistener(cmUI(n),'covarianceEdited',@updateCovPar);
            addlistener(cmUI(n),'typeChanged',@changeCovType);
        end
        hstructList.String = sname;
        cmUI(1).setVisible('on');
        
        httNugget.String = num2str(cm.nugget_d);
        hmodelNugget.String = num2str(cm.nugget_m);
        hxiNugget.String = num2str(cm.nugget_xi);
        htiltNugget.String = num2str(cm.nugget_tilt);
        hvariance.Value = cm.use_c0;
        helliptical.Value = cm.use_xi;
        htilted.Value = cm.use_tilt;
        

        if ~isempty(cm.covar_xi)
            nStruct = numel(cm.covar_xi);
            for n=1:nStruct
                if strcmp(model.grid.type, '3D')
                    cmXiUI(n) = CovarianceUI(cm.covar_xi(n).range,...
                        cm.covar_xi(n).angle,...
                        cm.covar_xi(n).sill,...
                        false,...
                        'Units','normalized',...
                        'Position',[0.49 0.5*vSpace 0.23 7*vSize+8*vSpace],...
                        'Parent',pparams);
                else
                    cmXiUI(n) = CovarianceUI(cm.covar_xi(n).range,...
                        cm.covar_xi(n).angle,...
                        cm.covar_xi(n).sill,...
                        false,...
                        'Units','normalized',...
                        'Position',[0.49 3.5*vSpace+3*vSize 0.23 4*vSize+5*vSpace],...
                        'Parent',pparams);
                end
                cmXiUI(n).createList('Units','normalized',...
                    'Position',[0.49 8*vSpace+7*vSize 0.23 vSize],...
                    'Parent',pparams);
                cmXiUI(n).setType(cm.covar_xi(n).type);
                cmXiUI(n).setVisible('off');
                addlistener(cmXiUI(n),'covarianceEdited',@updateCovPar);
                addlistener(cmXiUI(n),'typeChanged',@changeCovType);
            end
            cmXiUI(1).setVisible('on');
        end
        if ~isempty(cm.covar_tilt)
            nStruct = numel(cm.covar_tilt);
            for n=1:nStruct
                if strcmp(model.grid.type, '3D')
                    cmTiltUI(n) = CovarianceUI(cm.covar_tilt(n).range, ...
                        cm.covar_tilt.angle(n), cm.covar_tilt.sill(n),...
                        false,...
                        'Units','normalized',...
                        'Position',[0.74 0.5*vSpace0 0.23 7*vSize+8*vSpace],...
                        'Parent',pparams);
                else
                    cmTiltUI(n) = CovarianceUI(cm.covar_tilt(n).range, ...
                        cm.covar_tilt.angle(n), cm.covar_tilt.sill(n),...
                        false,...
                        'Units','normalized',...
                        'Position',[0.74 3.5*vSpace+3*vSize 0.23 4*vSize+5*vSpace],...
                        'Parent',pparams);
                end
                cmTiltUI(n).setVisible('off');
                
                cmTiltUI(n).createList('Units','normalized',...
                    'Position',[0.74 8*vSpace+7*vSize 0.23 vSize],...
                    'Parent',pparams);
                cmTiltUI(n).setType(cm.covar_tilt(n).type);
                addlistener(cmTiltUI(n),'covarianceEdited',@updateCovPar);
                addlistener(cmTiltUI(n),'typeChanged',@changeCovType);
            end
            cmTiltUI(1).setVisible('on');
        end
        fillEllipticalUI()
        fillTiltUI()

    end
    function fillEllipticalUI()
        if helliptical.Value == 1
            hxi.Visible = 'on';
            hxiText.Visible = 'on';
            hxiNugget.Visible = 'on';
            htilted.Enable = 'on';
                        
            cmXiUI(hstructList.Value).setVisible('on');

        else
            hxi.Visible = 'off';
            hxiText.Visible = 'off';
            hxiNugget.Visible = 'off';
            htilted.Enable = 'off';
            htilted.Value = 0;
            htilt.Visible = 'off';
            htiltText.Visible = 'off';
            htiltNugget.Visible = 'off';
            if ~isempty(cmXiUI)
                for n=1:numel(cmXiUI)
                    cmXiUI(n).setVisible('off');
                end
            end
            if ~isempty(cmTiltUI)
                for n=1:numel(cmTiltUI)
                    cmTiltUI(n).setVisible('off');
                end
            end
        end
    end
    function fillTiltUI()
        if htilted.Value == 1
            htilt.Visible = 'on';
            htiltText.Visible = 'on';
            htiltNugget.Visible = 'on';
            cmTiltUI(hstructList.Value).setVisible('on');
        else
            htilt.Visible = 'off';
            htiltText.Visible = 'off';
            htiltNugget.Visible = 'off';
            if ~isempty(cmTiltUI)
                for n=1:numel(cmTiltUI)
                    cmTiltUI(n).setVisible('off');
                end
            end
        end
    end
    function changeCovType(src,varargin)
        sNo = hstructList.Value;
        if src == cmUI(sNo)
            cm.covar(sNo) = CovarianceModels.buildCov(cmUI(sNo).getType(),...
                cmUI(sNo).range,cmUI(sNo).angle,cmUI(sNo).sill);
        elseif src == cmXiUI(sNo)
            cm.covar_xi(sNo) = CovarianceModels.buildCov(cmXiUI(sNo).getType(),...
                cmXiUI(sNo).range,cmXiUI(sNo).angle,cmXiUI(sNo).sill);
        elseif src == cmTiltUI(sNo)
            cm.covar_tilt(sNo) = CovarianceModels.buildCov(cmTiltUI(sNo).getType(),...
                cmTiltUI(sNo).range,cmTiltUI(sNo).angle,cmTiltUI(sNo).sill);
        end
    end
    function updateCovPar(src,varargin)
        sNo = hstructList.Value;
        if src == cmUI(sNo)
            cm.covar(sNo).range = cmUI(sNo).range;
            cm.covar(sNo).angle = cmUI(sNo).angle;
            cm.covar(sNo).sill = cmUI(sNo).sill;
        end
        if ~isempty(cmXiUI)
            if src == cmXiUI(sNo)
                cm.covar_xi(sNo).range = cmXiUI(sNo).range;
                cm.covar_xi(sNo).angle = cmXiUI(sNo).angle;
                cm.covar_xi(sNo).sill = cmXiUI(sNo).sill;
            end
        end
        if ~isempty(cmTiltUI)
            if src == cmTiltUI(sNo)
                cm.covar_tilt(sNo).range = cmTiltUI(sNo).range;
                cm.covar_tilt(sNo).angle = cmTiltUI(sNo).angle;
                cm.covar_tilt(sNo).sill = cmTiltUI(sNo).sill;
            end
        end
        if src==httNugget
            cm.nugget_d = str2double(httNugget.String);
        elseif src==hmodelNugget
            cm.nugget_m = str2double(hmodelNugget.String);
        elseif src==hxiNugget
            cm.nugget_xi = str2double(hxiNugget.String);
        elseif src==htiltNugget
            cm.nugget_tilt = str2double(htiltNugget.String);
        end
    end

    function changeTypeData(varargin)
        if isempty(model)
            warndlg('Data not Loaded')
            htypeData.Value = previousTypeData;
            return
        end
        if htypeData.Value ~= previousTypeData
            % type was really changed
            if previousTypeData == 1
                
                if isempty(model.amp_covar.covar)
                    warndlg({'Covariance model parameters not defined for Attenuation',...
                        'Use Covariance Model Estmation Module',...
                        'Switching to back to Traveltime'})
                    htypeData.Value = previousTypeData;
                    return
                end
                
                model.tt_covar = cm;
                cm = model.amp_covar;
                hvar.String = 'Attenuation';
                hcmin.String = num2str(cminAmp);
                hcmax.String = num2str(cmaxAmp);
            elseif htypeData.Value == 1
                
                if isempty(model.amp_covar.covar)
                    warndlg({'Covariance model parameters not defined for Slowness',...
                        'Use Covariance Model Estmation Module',...
                        'Switching to back to Amplitude'})
                    htypeData.Value = previousTypeData;
                    return
                end
                
                model.amp_covar = cm;
                cm = model.tt_covar;
                hvar.String = 'Slowness';
                hcmin.String = num2str(cminTT);
                hcmax.String = num2str(cmaxTT);
            end
            previousTypeData = htypeData.Value;
            fillCovarUI()
        end
    end

    function changeTypeInv(varargin)
        if isempty(model)
            warndlg('Data not Loaded')
            htypeInv.Value = previousTypeInv;
            return
        end
        if htypeInv.Value ~= previousTypeInv
            % type was really changed
            if htypeInv.Value==1
                if (htypeData.Value==1 && isempty(model.tt_covar.covar)) || ...
                        (htypeData.Value~=1 && isempty(model.amp_covar.covar))
                    warndlg({'Covariance model parameters not defined',...
                        'Use Covariance Model Estmation Module',...
                        'Switching to LSQR'})
                    htypeInv.Value = 2;
                    return
                end
                if htypeData.Value==1
                    cm = model.tt_covar;
                    hvar.String = 'Slowness';
                else
                    cm = model.amp_covar;
                    hvar.String = 'Attenuation';
                end
                pgeostat.Visible = 'on';
                plsqr.Visible = 'off';
                fillCovarUI()
            else
                pgeostat.Visible = 'off';
                plsqr.Visible = 'on';
            end
            previousTypeInv = htypeInv.Value;
        end
    end

    function viewPrevious(varargin)
        if isempty(model)
            return
        end
        if isempty(model.inv_res)
            return
        end
        no = hpreviousInv.Value;
        if model.inv_res(no).param.tomoAtt==0
            t = 1./model.inv_res(no).tomo.s;
        else
            t = model.inv_res(no).tomo.s;
        end
        nf=figure;
        ax=axes('Parent',nf);
        if strcmp(model.grid.type,'3D')==1
            gv = GridViewer(model.grid);
            gv.createSliders('Parent',nf);
            gv.slider2.Visible = 'off';
            gv.plotTomo(t,model.inv_res(no).name,'Distance [m]','Elevation [m]',ax)
        else
            gridViewer.plotTomo(t,model.inv_res(no).name,'Distance [m]','Elevation [m]',ax)
        end
        colorbar('peer',ax)
        colormap(ax,hcmap.String{hcmap.Value})
    end
    function deletePrevious(varargin)
        if isempty(model)
            return
        end
        if isempty(model.inv_res)
            return
        end
        no = hpreviousInv.Value;
        nos=1:numel(model.inv_res);
        ind = nos~=no;
        model.inv_res = model.inv_res(ind);
        
        if isempty(model.inv_res)
            hpreviousInv.String = {'-'};
        else
            names = cell(numel(model.inv_res),1);
            for n=1:numel(model.inv_res)
                names{n} = model.inv_res(n).name;
            end
            hpreviousInv.String = names;
        end
        tomo = [];
        saved = false;
    end
    function loadPrevious(varargin)
        if isempty(model)
            return
        end
        if isempty(model.inv_res)
            return
        end
        no = hpreviousInv.Value;
        tomo = model.inv_res(no).tomo;
        param = model.inv_res(no).param;
    end
    function doColorbar(varargin)
        if hcolorbar.Value==1
            cl = [str2double(hcmin.String) str2double(hcmax.String)];
            haxes1.CLim = cl;
            haxes2.CLim = cl;
            haxes3.CLim = cl;
        else
            haxes1.CLimMode = 'auto';
            haxes2.CLimMode = 'auto';
            haxes3.CLimMode = 'auto';
        end
    end
    function doMap(varargin)
        colormap(f, hcmap.String{hcmap.Value})
    end
    function doInv(varargin)
        if isempty(model)
            return
        end
        if huseRays.Value==1 && htypeInv.Value==1 && htilted.Value==1
            warndlg('Inversion using rays for tilted anisotropic media not yet available')
            return
        end
        cla(haxes1);cla(haxes2);cla(haxes3)
        cbh = findobj( f, 'tag', 'Colorbar' );
        for i = 1: length(cbh)
            colorbar(cbh(i),'off')
        end

        param = [];
        param.selectedMogs = hlistMog.Value;
        cmap = hcmap.String{hcmap.Value};
        clim = [];
        if htypeData.Value==1
            param.tomoAtt = 0;
            [data,idata] = Model.getModelData(model,[rep,file],'tt',param.selectedMogs);
            data = [model.grid.Tx(idata,:) model.grid.Rx(idata,:) data ...
                model.grid.TxCosDir(idata,:) model.grid.RxCosDir(idata,:)];
            if hcolorbar.Value==1
                clim = [cminTT cmaxTT];
            end
        else
            param.tomoAtt = 1;
            switch htypeData.Value
                case 2
                    [data,idata] = Model.getModelData(model,[rep,file],'amp',param.selectedMogs);
                case 3
                    [data,idata] = Model.getModelData(model,[rep,file],'fce',param.selectedMogs);
                case 4
                    [data,idata] = Model.getModelData(model,[rep,file],'hyb',param.selectedMogs);
            end
            data = [model.grid.Tx(idata,:) model.grid.Rx(idata,:) data];
            if hcolorbar.Value==1
                clim = [cminAmp cmaxAmp];
            end
        end
        if isempty(data)
            warndlg('Empty data')
            return
        end
        
        param.numItStraight = str2double(hnStraight.String);
        param.numItCurved = str2double(hnCurved.String);
        
        if param.tomoAtt == 1 && param.numItCurved > 0
            warndlg('Number of curved rays iterations set to 0 for attenuation tomography')
            param.numItCurved = 0;
        end
        
        param.saveInvData = 1;
        param.useCont = huseCont.Value;
        L = [];
        rays = {};
        noL = hpreviousInv.Value;
        if huseRays.Value == 1
            % check if grids are compatible
            gx = 0.5*(model.grid.grx(1:end-1)+model.grid.grx(2:end));
            gz = 0.5*(model.grid.grz(1:end-1)+model.grid.grz(2:end));
            if ~isempty(model.grid.gry)
                gy = 0.5*(model.grid.gry(1:end-1)+model.grid.gry(2:end));
            else
                gy = [];
            end
            if any(abs(model.inv_res(noL).tomo.x-gx)>100*eps) || ...
                    any(abs(model.inv_res(noL).tomo.y-gy)>100*eps) || ...
                    any(abs(model.inv_res(noL).tomo.z-gz)>100*eps)
                errordlg('Rays of previous inversion not compatible with current grid')
                return
            end
            
            ind = [];
            for n=1:size(data,1)
                ii = find( model.inv_res(noL).tomo.no_trace==data(n,9) );
                if isempty(ii)
                    warndlg(['Ray no ',num2str(data(n,9)),' not in Matrix of Rays'])
                    return
                else
                    ind = [ind ii]; %#ok<AGROW>
                end
            end
            L = model.inv_res(noL).tomo.L(ind,:);
            %rays = rays{ind};
            
            if model.inv_res(noL).param.cm.use_xi==1 && cm.use_xi==0
                % we need to transform matrix L
                % we are in 2D
                np = size(L,2)/2;
                Lx = L(:,1:np);
                Lz = L(:,(np+1):end);
                L = sqrt(Lx.^2 + Lz.^2);
            end
        end
        
        width = f.Position(3);
        height = f.Position(4);        
        vFac = 1;
        if ispc
            vFac = 0.81*vFac;
        end
        vSize = 22*vFac;
        axBorder = 60;%haxes1.Position(2);
        hBorder = 15;
        rBorder = 2*hBorder;
        hSize = 420;
        vSize2 = height-2*axBorder-4*vSize;
        hSize2 = width-(hBorder+hSize+axBorder+rBorder);

        if htypeInv.Value==1
            % Geostat
            
            param.doSim = hdoSim.Value;
            param.nSim = str2double(hnSim.String);
            if htilted.Value==1
                % we need three axes
                haxes2.Visible = 'on';
                haxes3.Visible = 'on';
                hSize3 = (hSize2-2*rBorder)/3;
                haxes1.Position = [hBorder+hSize+axBorder axBorder hSize3 vSize2];
                haxes2.Position = [hBorder+hSize+axBorder+hSize3+rBorder axBorder hSize3 vSize2];
                haxes3.Position = [hBorder+hSize+axBorder+2*hSize3+2*rBorder axBorder hSize3 vSize2];
                gh = {clim; cmap; haxes1; haxes2; haxes3};
            elseif hdoSim.Value==1 || helliptical.Value==1
                % we need two axes
                haxes2.Visible = 'on';
                haxes3.Visible = 'off';
                hSize3 = (hSize2-rBorder)/2;
                haxes1.Position = [hBorder+hSize+axBorder axBorder hSize3 vSize2];
                haxes2.Position = [hBorder+hSize+axBorder+hSize3+rBorder axBorder hSize3 vSize2];
                gh = {clim; cmap; haxes1; haxes2; ''};
            else
                haxes1.Position = [hBorder+hSize+axBorder axBorder hSize2 vSize2];
                haxes2.Visible = 'off';
                haxes3.Visible = 'off';
                gh = {clim; cmap; haxes1; ''; ''};
            end
            param.cm = copy(cm);
            if cm.use_tilt==1
                tomo = invGeostatTiltEllipt(param,data,idata,model.grid,cm,L,hmessage,gh,gridViewer);
            elseif cm.use_xi==1
                tomo = invGeostatEllipt(param,data,idata,model.grid,cm,L,hmessage,gh,gridViewer);
            else
                tomo = invGeostat(param,data,idata,model.grid,cm,L,hmessage,gh,gridViewer);
            end
        else
            % LSQR
            param.tol = str2double(htolLSQR.String);
            param.wCont = str2double(hwContLSQR.String);
            param.alphax = str2double(halphaxLSQR.String);
            param.alphay = str2double(halphayLSQR.String);
            param.alphaz = str2double(halphazLSQR.String);
            param.order = hopOrderLSQR.Value;
            param.nbreiter = str2double(hnitLSQR.String);
            param.dv_max = 0.01*str2double(hdeltamaxLSQR.String);

            haxes1.Position = [hBorder+hSize+axBorder axBorder hSize2 vSize2];
            haxes2.Visible = 'off';
            haxes3.Visible = 'off';
            gh = {clim; cmap; haxes1; ''; ''};
            
            tomo = invLSQR(param,data,idata,model.grid,L,hmessage,gh,gridViewer);
        end
        if isempty(tomo)
            return
        end
        
        if isempty(tomo.rays)
            tomo.rays = rays;
        end
        [~, mdate] = strtok(hlistMog.String{param.selectedMogs(1)},' - ');
        tomo.date = mdate(4:end);
        for n=2:length(param.selectedMogs)
            [~, mdate] = strtok(hlistMog.String{param.selectedMogs(n)},' - ');
            d = mdate(4:end);
            if datenum(d) < datenum(tomo.date)
                tomo.date = d;
            end
        end
        saved = false;
    end

    function doElliptical(varargin)
        if helliptical.Value==1 && isempty(cm.covar_xi)
            warndlg({'Covariance model parameters not defined for elliptically anisotropic media'...
                'Use Covariance Model Estmation Module'})
            helliptical.Value = 0;
        end
        cm.use_xi = helliptical.Value;
        fillEllipticalUI()
    end
    function doTilted(varargin)
        if htilted.Value==1 && isempty(cm.covar_tilt)
            warndlg({'Covariance model parameters not defined for tilted elliptically anisotropic media'...
                'Use Covariance Model Estmation Module'})
            htilted.Value = 0;
        end
        cm.use_tilt = htilted.Value;
        fillTiltUI()
    end
    function setClim(src,varargin)
        if htypeData.Value==1
            if src==hcmin
                if str2double(src.String)>cmaxTT
                    warndlg({'Value should be smaller than max value',...
                        'Resetting value'})
                    src.String = num2str(cminTT);
                    return
                else
                    cminTT = str2double(src.String);
                end
            else
                if str2double(src.String)<cminTT
                    warndlg({'Value should be greater than min value',...
                        'Resetting value'})
                    src.String = num2str(cmaxTT);
                    return
                else
                    cmaxTT = str2double(src.String);
                end
            end
        else
            if src==hcmin
                if str2double(src.String)>cmaxAmp
                    warndlg({'Value should be smaller than max value',...
                        'Resetting value'})
                    src.String = num2str(cminAmp);
                    return
                else
                    cminAmp = str2double(src.String);
                end
            else
                if str2double(src.String)<cminAmp
                    warndlg({'Value should be greater than min value',...
                        'Resetting value'})
                    src.String = num2str(cmaxAmp);
                    return
                else
                    cmaxAmp = str2double(src.String);
                end
            end
        end
        if hcolorbar.Value==1
            doColorbar()
        end
    end
    function checkNsim(varargin)
        ns = str2double(hnSim.String);
        if 2^nextpow2(ns) ~= ns
            warndlg({'Number of simulations must be a power of 2',...
                ['Raising the number to ',num2str(2^nextpow2(ns))]})
            hnSim.String = num2str(2^nextpow2(ns));
        end
    end
    function doSim(varargin)
        if ~isempty(gridViewer.slider2)
            if hdoSim.Value==1
                gridViewer.slider2.Visible = 'on';
            else
                gridViewer.slider2.Visible = 'off';
            end
        end
    end
    function exportTomo(varargin)
        
        [file, rep] = uiputfile('*.xmf','Export Results');
        if isequal(file,0)
            return
        end
        
        if param.tomoAtt==0
            model.grid.toXdmf(1./tomo.s,'Velocity',[rep,file])
        else
            model.grid.toXdmf(tomo.s,'Attenuation',[rep,file])
        end
        
    end
    function showTomo(varargin)
        if isempty(tomo)
            return
        end
        if param.tomoAtt==0
            t = 1./tomo.s;
        else
            t = tomo.s;
        end
        
        nf=figure;
        if isfield(tomo,'xi')
            ax=subplot(1,2,1,'Parent',nf);
            ax1=subplot(1,2,2,'Parent',nf);
        else
            ax=axes('Parent',nf);
        end
        
        if strcmp(model.grid.type,'3D')==1
            gv = GridViewer(model.grid);
            gv.createSliders('Parent',nf);
            gv.slider2.Visible = 'off';
            gv.plotTomo(t,'','Distance [m]','Elevation [m]',ax)
        else
            gridViewer.plotTomo(t,'','Distance [m]','Elevation [m]',ax)
        end
        hb=colorbar('peer',ax);
        colormap(nf,hcmap.String{hcmap.Value})
        
        load([rep,file],'mogs')
        d = mogs(hlistMog.Value).data;
        if param.tomoAtt==0
            units = [d.cunits,'/',d.tunits];
        else
            units = ['Np/',d.cunits];
        end
        set(get(hb,'Title'),'String',units,'FontSize',12)
        
        if isfield(tomo,'xi')
            if param.tomoAtt==0
                titre = 'V_x';
            else
                titre = '\alpha_x';
            end
            title(ax,titre,'FontSize',14)
            if strcmp(model.grid.type,'3D')==1
                gv.slider2.Visible = 'on';
                gv.plotTomo(tomo.xi,'\xi','Distance [m]','Elevation [m]',ax1)
            else
                gridViewer.plotTomo(tomo.xi,'\xi','Distance [m]','Elevation [m]',ax1)
            end
            colorbar('peer',ax1);
        end
    end
    function showSim(varargin)
        if isempty(tomo)
            return
        end
        if ~isfield(tomo,'simu')
            return
        end
        nf=figure;
        gv = GridViewer(model.grid);
        if strcmp(model.grid.type,'3D')==1
            gv.createSliders('Parent',nf);
            gv.slider2.Visible = 'off';
        end
        if param.tomoAtt==1
            gv.plotSimu(tomo.simu,nf);
        else
            gv.plotSimu(1./tomo.simu,nf);
        end
        gv.simuSlider.Position(2) = 3*gv.simuSlider.Position(2);
    end
    function showRays(varargin)
        if isempty(tomo)
            return
        end
        if isempty(tomo.rays)
            return
        end
        nf=figure;
        ax=axes('Parent',nf);
        
        rmin = 1.001*min(tomo.invData(end).res);
        rmax = 1.001*max(tomo.invData(end).res);
        rmax = max(abs([rmin rmax]));
        rmin = -rmax;
        c = [0 0 1;0.8 0.8 0.8;1 0 0];
        c = interp1((-1:1)',c,(-1:0.02:1)');
        
        m = (size(c,1)-1)/(rmax-rmin);
        b = 1-rmin*m;
        p = m*tomo.invData(end).res(1)+b;
        
        if strcmp(model.grid.type,'3D')
            couleur = interp1(c,p);
            plot3(ax,tomo.rays{1}(:,1),tomo.rays{1}(:,2),tomo.rays{1}(:,3),...
                'Color',couleur)
            hold(ax,'on')
            for n=2:length(tomo.rays)
                p = m*tomo.invData(end).res(n)+b;
                couleur = interp1(c,p);
                plot3(ax,tomo.rays{n}(:,1),tomo.rays{n}(:,2),tomo.rays{n}(:,3),...
                    'Color',couleur)
            end
            hold(ax,'off')
            xlabel(ax,'X','FontSize',12)
            ylabel(ax,'Y','FontSize',12)
            zlabel('Elevation [m]','FontSize',12)
        else
            couleur = interp1(c,p);
            plot(ax,tomo.rays{1}(:,1),tomo.rays{1}(:,end),'Color',couleur)
            hold(ax,'on')
            for n=2:length(tomo.rays)
                p = m*tomo.invData(end).res(n)+b;
                if p>size(c,1)
                    p=size(c,1);
                elseif p<1
                    p=1;
                end
                    
                couleur = interp1(c,p);
                plot(ax,tomo.rays{n}(:,1),tomo.rays{n}(:,end),'Color',couleur)
            end
            hold(ax,'off')
            xlabel('Distance [m]','FontSize',12)
            ylabel('Elevation [m]','FontSize',12)
        end
        set(ax,'DataAspectRatio',[1 1 1])
        axis(ax,'tight')
        colormap(c)%jet)
        hb=colorbar('peer',ax);
        caxis(ax,[rmin rmax])
        set(get(hb,'Title'),'String','Residuals','FontSize',12)
    end
    function showRayDensity(varargin)
        if isempty(tomo)
            return
        end
        nf=figure;
        ax=axes('Parent',nf);

        if isfield(tomo,'xi')
            nCells=size(tomo.L,2)/2;
            Lx = tomo.L(:,1:nCells);
            Lz = tomo.L(:,(1+nCells):end);
            rd = full(sum(sqrt(Lx.^2+Lz.^2)));
        else
            rd = full(sum(tomo.L));
        end
        if strcmp(model.grid.type,'3D')==1
            gv = GridViewer(model.grid);
            gv.createSliders('Parent',nf);
            gv.slider2.Visible = 'off';
            gv.plotTomo(rd,'','Distance [m]','Elevation [m]',ax)
        else
            gridViewer.plotTomo(rd,'','Distance [m]','Elevation [m]',ax)
        end
        hb=colorbar('peer',ax);
        colormap(nf,hcmap.String{hcmap.Value})
        set(get(hb,'Title'),'String','Ray Density','FontSize',12)
    end
    function showResiduals(varargin)
        if isempty(tomo)
            return
        end
        if param.tomoAtt == 0
            [data,idata] = Model.getModelData(model,[rep,file],'tt',param.selectedMogs);
            [depth,~] = Model.getModelData(model,[rep,file],'depth',param.selectedMogs,[],'tt');
            data = [model.grid.Tx(idata,:) model.grid.Rx(idata,:) data];
        else
            switch htypeData.Value
                case 2
                    [data,idata] = Model.getModelData(model,[rep,file],'amp',param.selectedMogs);
                    [depth,~] = Model.getModelData(model,[rep,file],'depth',param.selectedMogs,[],'tt');
                case 3
                    [data,idata] = Model.getModelData(model,[rep,file],'fce',param.selectedMogs);
                    [depth,~] = Model.getModelData(model,[rep,file],'depth',param.selectedMogs,[],'fce');
                case 4
                    [data,idata] = Model.getModelData(model,[rep,file],'hyb',param.selectedMogs);
                    [depth,~] = Model.getModelData(model,[rep,file],'depth',param.selectedMogs,[],'hyb');
            end
            data = [model.grid.Tx(idata,:) model.grid.Rx(idata,:) data];
        end
        hyp = sqrt( sum((data(:,1:3)-data(:,4:6)).^2, 2) );
        dz = data(:,6)-data(:,3);
        theta = 180/pi*asin(dz./hyp);

        nIt = length(tomo.invData);
        rms = zeros(nIt,1);
        for n=1:nIt
            rms(n) = rmsv(tomo.invData(n).res);
        end
        
        
        figure
        subplot(2,2,1)
        plot(1:nIt, rms,'o')
        ylabel('||res||')
        xlabel('Iteration')
        
        res = tomo.invData(nIt).res;
        subplot(2,2,2)
        plot(theta, res,'o')
        xlabel('Angle w/r to horizontal [deg]')
        ylabel('Residuals')
        
        vres = var(res);
        h1=subplot(2,2,3);
        hist(res,30)
        xlabel('Residuals')
        ylabel('Count')
        title(['\sigma^2 = ', num2str(vres)])
        
        dTx = sort(unique(depth(:,1)));
        dRx = sort(unique(depth(:,2)));
        imdata = nan(length(dTx),length(dRx));
        for i=1:length(dTx)
            for j=1:length(dRx)
                ind = dTx(i)==depth(:,1) & dRx(j)==depth(:,2);
                if sum(ind)==1
                    imdata(i,j) = res(ind);
                end
            end
        end
        
        p = [0 0 1;1 1 1;1 0 0];
        p = interp1((-1:1)',p,(-1:0.02:1)');
        
        z=imdata;
        z(isnan(imdata))=0;
        z(~isnan(imdata))=1;
        
        h2=subplot(2,2,4);
        imagesc(dRx,dTx,imdata);
        set(gca,'color',[0.8 0.8 0.8]);
        alpha(z);
        axis image;
        
        ca = caxis;
        caxis([-max(abs(ca)) max(abs(ca))])
        
        xlabel('Rx depth')
        ylabel('Tx depth')
        colorbar
        
        colormap(h2,p)
        set(get(h1,'Children'),'FaceColor',[0 0 1])
    end
end