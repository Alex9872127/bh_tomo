function bh_tomo2_tlinv( varargin )
%BH_TOMO2_TLINV Perform time-lapse tomographic inversion

rep='';
file='';
if nargin>=2
    rep=varargin{1};
    file=varargin{2};
end

modelNo = [];
model = [];
saved = true;
previousTypeData = 1;
previousTypeInv = 1;
tomo = [];
param = [];
gridViewer = [];

cminAmp = 1;
cmaxAmp = 3;
cminTT = 0.06;
cmaxTT = 0.12;

fs = 11;
if nargin>=3
    fs = varargin{3};
elseif ispc
    fs = 9;
end
vScale = 1;
if ispc
    vScale = 0.81;
end

width = 1400;
height = 875*vScale;
% get screen size
su = get(groot,'Units');
set(groot,'Units','points')
scnsize = get(groot,'ScreenSize');
pos = [scnsize(3)/2-width/2 scnsize(4)/2-height/2 width height];
set(groot,'Units',su)       % Restore default root screen units

f = figure('Visible','off',...
    'Units','points',...
    'Position',pos,...
    'Tag','fig_bh_tomo2_tlinv',...
    'Name','bh_tomo_tlinv',...
    'NumberTitle','off',...
    'ToolBar','none',...,
    'MenuBar','None',...
    'SizeChangedFcn',@resizeUI,...
    'CloseRequestFcn',@closeWindow);

%
% Menu
%
hmenu = uimenu(f,'Label','File');
uimenu(hmenu,'Label','Open ...',...
    'Accelerator','O',...
    'Callback',@openFile);
uimenu(hmenu,'Label','Save',...
    'Accelerator','S',...
    'Callback',@saveFile);
uimenu(hmenu,'Label','Close',...
    'Separator','on',...
    'Accelerator','W',...
    'Callback',@closeWindow);
% hresultsMenu = uimenu(f,'Label','Results');
% uimenu(hresultsMenu,'Label','Export ...',...
%     'Accelerator','E',...
%     'Callback',@exportTomo);
% uimenu(hresultsMenu,'Label','Tomogram',...
%     'Accelerator','T',...
%     'Callback',@showTomo);
% uimenu(hresultsMenu,'Label','Simulations',...
%     'Accelerator','G',...
%     'Callback',@showSim);
% uimenu(hresultsMenu,'Label','Rays',...
%     'Accelerator','R',...
%     'Callback',@showRays);
% uimenu(hresultsMenu,'Label','Ray Density',...
%     'Accelerator','D',...
%     'Callback',@showRayDensity);
% uimenu(hresultsMenu,'Label','Residuals',...
%     'Accelerator','L',...
%     'Callback',@showResiduals);


%
% Main Panels
%

pdata = uipanel(f,'Title','Data',...
    'Units','points',...
    'FontSize',fs+1);
pinv = uipanel(f,'Title','Inversion Parameters',...
    'Units','points',...
    'FontSize',fs+1);
pfig = uipanel(f,'Title','Figures',...
    'Units','points',...
    'FontSize',fs+1);

hmessage = uicontrol('Style','text',...
    'ForegroundColor','red',...
    'BackgroundColor','white',...
    'FontSize',fs+1,...
    'Units','points',...
    'Parent',f);

nLines=9;
vSizeTot = nLines*22 + (nLines+1)*5;
vSize = 22/vSizeTot;
vSpace = 5/vSizeTot;

% Data

hmodelName = uicontrol('Style','text',...
    'String','Model: ',...
    'ForegroundColor','red',...
    'FontSize',fs+1,...
    'HorizontalAlignment','left',...
    'Units','normalized',...
    'Position',[0.05 8*vSize+9*vSpace 0.9 vSize],...
    'Parent',pdata);
htypeData = uicontrol('Style','popupmenu',...
    'String',{'Traveltime','Amplitude - Peak-to-Peak','Amplitude - Centroid Frequency'},...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.05 6.5*vSize+7.5*vSpace 0.5 vSize],...
    'Callback',@changeTypeData,...
    'Parent',pdata);
uicontrol('Style','text',...
    'String','Baseline Data',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.03 5*vSize+6*vSpace 0.45 vSize],...
    'Parent',pdata);
uicontrol('Style','text',...
    'String','Repeat Data',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.51 5*vSize+6*vSpace 0.45 vSize],...
    'Parent',pdata);
hlistBaseline = uicontrol('Style','listbox',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.03 vSpace 0.45 5*vSize+5*vSpace],...
    'Parent',pdata);
hlistRepeat = uicontrol('Style','listbox',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.51 vSpace 0.45 5*vSize+5*vSpace],...
    'Parent',pdata);


% Inversion params

nLines=15;
vSizeTot = nLines*22 + (nLines+1)*5;
vSize = 22/vSizeTot;
vSpace = 5/vSizeTot;

uicontrol('Style','pushbutton',...
    'String','GO',...
    'FontSize',fs+1,...
    'FontWeight','bold',...
    'Units','normalized',...
    'Position',[0.3 1.5*vSpace 0.4 vSize],...
    'Callback',@doInv,...
    'Parent',pinv);

psimult = uipanel(pinv,'Title','Parameters - Simultaneous Inversion',...
    'Units','normalized',...
    'Position',[0.025 2*vSpace+1.25*vSize 0.95 7*vSize+7*vSpace],...
    'FontSize',fs,...
    'Visible','on');
pdiff = uipanel(pinv,'Title','Parameters - Difference Inversion',...
    'Units','normalized',...
    'Position',[0.025 2*vSpace+1.25*vSize 0.95 7*vSize+7*vSpace],...
    'FontSize',fs,...
    'Visible','off');

pweight = uipanel(pinv,'Title','Weight - Reservoir Cells',...
    'Units','normalized',...
    'Position',[0.025 10*vSpace+8.7*vSize 0.95 1.5*vSize+2*vSpace],...
    'FontSize',fs,...
    'Visible','on');
pref = uipanel(pinv,'Title','Reference Tomogram',...
    'Units','normalized',...
    'Position',[0.025 12*vSpace+10.75*vSize 0.95 1.5*vSize+2*vSpace],...
    'FontSize',fs,...
    'Visible','on');


uicontrol('Style','text',...
    'String','Algorithm',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','right',...
    'Position',[0.1 15*vSpace+13.75*vSize 0.3 vSize],...
    'Parent',pinv);
htypeInv = uicontrol('Style','popupmenu',...
    'String',{'Simultaneous Inversion','Difference Inversion'},...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.45 15*vSpace+13.75*vSize 0.4 vSize],...
    'Callback',@changeTypeInv,...
    'Parent',pinv);
uicontrol('Style','text',...
    'String','Number of Iterations',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','right',...
    'Position',[0.1 14*vSpace+12.75*vSize 0.3 vSize],...
    'Parent',pinv);
hnumIt = uicontrol('Style','edit',...
    'String',5,...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.45 14*vSpace+12.75*vSize 0.2 vSize],...
    'Callback',@changeTypeInv,...
    'Parent',pinv);

nLines=1;
vSizeTot = nLines*22 + (nLines+1)*5;
vSize = 22/vSizeTot;
vSpace = 5/vSizeTot;

hrefTomo = uicontrol('Style','popupmenu',...
    'String',{'-'},...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.05 vSpace 0.5 vSize],...
    'Callback',@changeTypeInv,...
    'Parent',pref);
uicontrol('Style','pushbutton',...
    'String','View',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','right',...
    'Position',[0.65 vSpace 0.2 vSize],...
    'Callback',@showRef,...
    'Parent',pref);



nLines=7;
vSizeTot = nLines*22 + (nLines+1)*5;
vSize = 22/vSizeTot;
vSpace = 5/vSizeTot;

uicontrol('Style','text',...
    'String',[char(945),' : '],...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Position',[0.05 7*vSpace+6*vSize 0.4 vSize],...
    'Parent',psimult);
halphaS = uicontrol('Style','edit',...
    'String','1',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.5 7*vSpace+6*vSize 0.2 vSize],...
    'Parent',psimult);
uicontrol('Style','text',...
    'String',[char(946),' : '],...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Position',[0.05 6*vSpace+5*vSize 0.4 vSize],...
    'Parent',psimult);
hbetaS = uicontrol('Style','edit',...
    'String','75',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.5 6*vSpace+5*vSize 0.2 vSize],...
    'Parent',psimult);
uicontrol('Style','text',...
    'String',[char(955),' : '],...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Position',[0.05 5*vSpace+4*vSize 0.4 vSize],...
    'Parent',psimult);
hlambdaS = uicontrol('Style','edit',...
    'String','0.2',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.5 5*vSpace+4*vSize 0.2 vSize],...
    'Parent',psimult);
uicontrol('Style','text',...
    'String',[char(956),' : '],...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Position',[0.05 4*vSpace+3*vSize 0.4 vSize],...
    'Parent',psimult);
hmuS = uicontrol('Style','edit',...
    'String','1',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.5 4*vSpace+3*vSize 0.2 vSize],...
    'Parent',psimult);
uicontrol('Style','text',...
    'String',[char(951),' : '],...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Position',[0.05 3*vSpace+2*vSize 0.4 vSize],...
    'Parent',psimult);
hetaS = uicontrol('Style','edit',...
    'String','1',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.5 3*vSpace+2*vSize 0.2 vSize],...
    'Parent',psimult);
uicontrol('Style','text',...
    'String','Step Damping Factor : ',...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Position',[0.05 2*vSpace+vSize 0.4 vSize],...
    'Parent',psimult);
hdampS = uicontrol('Style','edit',...
    'String','0.2',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.5 2*vSpace+vSize 0.2 vSize],...
    'Parent',psimult);
hraysStext = uicontrol('Style','text',...
    'String','Rays : ',...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Position',[0.05 vSpace 0.4 vSize],...
    'Visible','off',...
    'Parent',psimult);
hraysS = uicontrol('Style','popupmenu',...
    'String',{'-'},...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.5 vSpace 0.45 vSize],...
    'Visible','off',...
    'Parent',psimult);


uicontrol('Style','text',...
    'String',[char(946),' : '],...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Position',[0.05 7*vSpace+6*vSize 0.4 vSize],...
    'Parent',pdiff);
hbetaD = uicontrol('Style','edit',...
    'String','75',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.5 7*vSpace+6*vSize 0.2 vSize],...
    'Parent',pdiff);
uicontrol('Style','text',...
    'String',[char(955),' : '],...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Position',[0.05 6*vSpace+5*vSize 0.4 vSize],...
    'Parent',pdiff);
hlambdaD = uicontrol('Style','edit',...
    'String','0.2',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.5 6*vSpace+5*vSize 0.2 vSize],...
    'Parent',pdiff);
uicontrol('Style','text',...
    'String',[char(956),' : '],...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Position',[0.05 5*vSpace+4*vSize 0.4 vSize],...
    'Parent',pdiff);
hmuD = uicontrol('Style','edit',...
    'String','1',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.5 5*vSpace+4*vSize 0.2 vSize],...
    'Parent',pdiff);
uicontrol('Style','text',...
    'String',[char(951),' : '],...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Position',[0.05 4*vSpace+3*vSize 0.4 vSize],...
    'Parent',pdiff);
hetaD = uicontrol('Style','edit',...
    'String','1',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.5 4*vSpace+3*vSize 0.2 vSize],...
    'Parent',pdiff);
uicontrol('Style','text',...
    'String','Step Damping Factor : ',...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Position',[0.05 3*vSpace+2*vSize 0.4 vSize],...
    'Parent',pdiff);
hdampD = uicontrol('Style','edit',...
    'String','0.2',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.5 3*vSpace+2*vSize 0.2 vSize],...
    'Parent',pdiff);
hraysDtext = uicontrol('Style','text',...
    'String','Rays : ',...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Position',[0.05 2*vSpace+vSize 0.4 vSize],...
    'Visible','off',...
    'Parent',pdiff);
hraysD = uicontrol('Style','popupmenu',...
    'String',{'-'},...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.5 2*vSpace+vSize 0.45 vSize],...
    'Visible','off',...
    'Parent',pdiff);


nLines=1;
vSizeTot = nLines*22 + (nLines+1)*5;
vSize = 22/vSizeTot;
vSpace = 5/vSizeTot;

hreservoir = uicontrol('Style','checkbox',...
    'String','Apply',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.1 vSpace 0.15 vSize],...
    'Parent',pweight);
uicontrol('Style','text',...
    'String','Value: ',...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Position',[0.3 vSpace 0.3 vSize],...
    'Parent',pweight);
hresWeight = uicontrol('Style','edit',...
    'String','0.0001',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.65 vSpace 0.2 vSize],...
    'Parent',pweight);



hcolorbar = uicontrol('Style','checkbox',...
    'String','Set Color Limits',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.02 vSpace 0.12 vSize],...
    'Callback',@doColorbar,...
    'Parent',pfig);
uicontrol('Style','text',...
    'String','Min: ',...
    'HorizontalAlignment','right',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.15 vSpace 0.04 vSize],...
    'Parent',pfig)
hcmin = uicontrol('Style','edit',...
    'String','0.06',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.2 vSpace 0.07 vSize],...
    'Callback',@setClim,...
    'Parent',pfig);
uicontrol('Style','text',...
    'String','Max: ',...
    'HorizontalAlignment','right',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.28 vSpace 0.04 vSize],...
    'Parent',pfig)
hcmax = uicontrol('Style','edit',...
    'String','0.12',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.33 vSpace 0.07 vSize],...
    'Callback',@setClim,...
    'Parent',pfig);

m = {'cmr','polarmap','parula','jet','hsv','hot','cool','autumn','spring','winter',...
    'summer','gray','bone','copper','pink','prism','flag','colorcube','lines'};

hcmap = uicontrol('Style','popupmenu',...
    'String',m,...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.41 vSpace 0.12 vSize],...
    'Callback',@doMap,...
    'Parent',pfig);
hsliderText = uicontrol('Style','text',...
    'String','Y Plane',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.54 vSpace 0.07 vSize],...
    'Visible','off',...
    'Parent',pfig);


haxes1 = axes('Units','points','Parent',f,'Visible','on');
haxes2 = axes('Units','points','Parent',f,'Visible','on');

f.Visible = 'on';


    function resizeUI(varargin)
        f.Visible = 'off';
        hBorder = 15;
        width = f.Position(3);
        height = f.Position(4);
        
        vFac = 1;
        if ispc
            vFac = 0.81*vFac;
        end
        vSize = 22*vFac;
        vSpace = 5*vFac;
        vBorder = 10*vFac;
        
        axBorder = 60;%haxes1.Position(2);
        rBorder = 2*hBorder;
        hSize = 420;
        
        vSize2 = 9*vSize+10*vSpace;
        vPos = height-2*vBorder-vSize2;
        pdata.Position = [hBorder vPos hSize vSize2];

        vSize2 = 16*vSize+17*vSpace;
        vPos = vPos-2*vBorder-vSize2;
        pinv.Position = [hBorder vPos hSize vSize2];
        
        vSize2 = height-2*axBorder-4*vSize;
        hSize2 = width-(hBorder+hSize+axBorder+rBorder);
        hSize3 = (hSize2-rBorder)/2;

        hmessage.Position = [hBorder+hSize+axBorder height-2*vSize hSize2 vSize];
        pfig.Position = [hBorder+hSize+axBorder height-4.25*vSize hSize2 1.5*vSize+2*vSpace];
        
        haxes1.Position = [hBorder+hSize+axBorder axBorder hSize3 vSize2];
        haxes2.Position = [hBorder+hSize+axBorder+hSize3+rBorder axBorder hSize3 vSize2];

        f.Visible = 'on';
    end

    function closeWindow(varargin)
        if saved == false
            choice = questdlg('Database not saved, quit anyway?',...
                'bh_tomo_db',...
                'Don''t save','Cancel','Save','Save');
            switch choice
                case 'Don''t save'
                case 'Cancel'
                    return
                case 'Save'
                    saveFile()
            end
        end
        quitUI()
    end
    function quitUI(varargin)
        delete(f)
    end
    function saveFile(varargin)
        if isempty(model)
            return
        end
        
        if isempty(tomo)
            % save current model even if empty tomo,
            %    in case previous inversion were removed
            load([rep,file],'models')
            models(modelNo).inv_res = model.inv_res; %#ok<STRNU>
            save([rep,file],'models','-append')
            saved = true;
            return
        end
        
    end
    function openFile(varargin)
        [modelNo,file2,rep2] = chooseModel(rep,file);
        if isempty(modelNo)
            return
        end
        rep=rep2;
        file=file2;
        try
            load([rep,file],'models','mogs')
        catch ME
            errordlg(ME.message)
            return
        end
        model = models(modelNo);
        if isempty(model.grid)
            errordlg('Grid not created, inversion cannot be computed')
            return
        end
        
        %
        % Reset UI
        %
        mname = cell(1,numel(model.mogs));
        for n = 1:numel(model.mogs)
            mname{n} = [mogs(model.mogs(n)).name,' - ',mogs(model.mogs(n)).date];
        end
        hlistBaseline.String = mname;
        hlistBaseline.Max = numel(model.mogs);
        hlistRepeat.String = mname;
        hlistRepeat.Max = numel(model.mogs);
        hmodelName.String = model.name;
        
        inv_name = cell(1,length(model.inv_res));
        for n=1:length(model.inv_res)
            inv_name{n} = model.inv_res(n).name;
        end
        hrefTomo.String = inv_name;
        hraysS.String = inv_name;
        hraysD.String = inv_name;
        
        htypeData.Value = 1;
        gridViewer = GridViewer(model.grid);
        if strcmp(model.grid.type, '3D')
            hsliderText.Visible = 'on';
            gridViewer.createSliders('Parent',pfig,...
                'Units','normalized','Visible','on');
            nLines=1;
            vSizeTot = nLines*22 + 2*5;
            vSize = 22/vSizeTot;
            vSpace = 5/vSizeTot;
            gridViewer.slider1.Position = [0.64 vSpace 0.15 vSize];
            gridViewer.slider2.Position = [0.80 vSpace 0.15 vSize];
        end
        
    end

    function doInv(varargin)
        if isempty(model)
            return
        end
        hmessage.String = 'Starting ...';
        cla(haxes1);cla(haxes2);
        cbh = findobj( 0, 'tag', 'Colorbar' );
        for i = 1: length(cbh)
            colorbar(cbh(i),'off')
        end

        param = [];
        param.db_file = [rep,file];
        param.saveInvData = 1;
        if ~isempty(model.grid.cont.ind_reservoir) && hreservoir.Value == 1
            param.ind_reservoir = model.grid.cont.ind_reservoir;
        else
            param.ind_reservoir = false(model.grid.getNCell());
        end
        param.weight_reservoir = str2double(hresWeight.String);
        param.max_it = str2double(hnumIt.String);
        param.ref_inv_no = hrefTomo.Value;

        cmap = hcmap.String{hcmap.Value};
        clim = [];
        if htypeData.Value == 1
            param.typeData = 'tt';
            param.tomoAtt = 0;
            
            if model.inv_res(param.ref_inv_no).param.tomoAtt == 1
                errordlg('Cannot use attenuation model as reference for traveltime inversion')
                hmessage.String = '';
                return
            end
            if hcolorbar.Value==1
                clim = [cminTT cmaxTT];
            end
        elseif htypeData.Value == 2
            param.typeData = 'amp';
            param.tomoAtt = 1;
            
            if model.inv_res(param.ref_inv_no).param.tomoAtt == 0
                errordlg('Cannot use velocity model as reference for amplitude inversion')
                hmessage.String = '';
                return
            end
            if hcolorbar.Value==1
                clim = [cminAmp cmaxAmp];
            end
        else
            param.typeData = 'fce';
            param.tomoAtt = 1;
            
            if model.inv_res(param.ref_inv_no).param.tomoAtt == 0
                errordlg('Cannot use velocity model as reference for amplitude inversion')
                hmessage.String = '';
                return
            end
            if hcolorbar.Value==1
                clim = [cminAmp cmaxAmp];
            end
        end
        
        gh = {clim; cmap; haxes1; haxes2};

        if htypeInv.Value == 1
            % Simultaneous
            param.alpha = str2double(halphaS.String);
            param.beta = str2double(hbetaS.String);
            param.lambda = str2double(hlambdaS.String);
            param.mu = str2double(hmuS.String);
            param.eta = str2double(hetaS.String);
            param.damping = str2double(hdampS.String);
            
            param.mog_no0 = hlistBaseline.Value;
            param.mog_no1 = hlistRepeat.Value;
            param.L_tomo_no = hraysS.Value;
            
            if param.tomoAtt == 1 && ~isfield(model.inv_res(param.L_tomo_no).tomo,'no_trace0')
                errordlg('Selected rays not obtained with simultaneous inversion')
                hmessage.String = '';
                return
            end
            
            tomo = invSimultaneous(model,param,hmessage,gh,gridViewer);
        else
            % Difference
            param.beta = str2double(hbetaD.String);
            param.lambda = str2double(hlambdaD.String);
            param.mu = str2double(hmuD.String);
            param.eta = str2double(hetaD.String);
            param.damping = str2double(hdampD.String);

            param.mog_no = hlistRepeat.Value;
            param.L_tomo_no = hraysD.Value;
            
            % Show Reference model
            if param.tomoAtt == 1
                gridViewer.plotTomo(model.inv_res(param.ref_inv_no).tomo.s,...
                    'Baseline Survey: Attenuation','Distance [m]','Elevation [m]',haxes1)
            else
                gridViewer.plotTomo(1./model.inv_res(param.ref_inv_no).tomo.s,...
                    'Baseline Survey: Velocity','Distance [m]','Elevation [m]',haxes1)
            end
            if ~isempty(clim), caxis(haxes1,clim), end
            colorbar('peer', haxes1)
            colormap(haxes1,cmap)
            drawnow
            
            tomo = invDifference(model,param,hmessage,gh,gridViewer);
        end
        saved = false;
        hmessage.String = '';
        
    end
    function changeTypeData(varargin)
        if isempty(model)
            warndlg('Data not Loaded')
            htypeData.Value = previousTypeData;
            return
        end
        if htypeData.Value ~= previousTypeData
            % type was really changed
            if previousTypeData == 1
                hraysS.Visible = 'on';
                hraysD.Visible = 'on';
                hraysStext.Visible = 'on';
                hraysDtext.Visible = 'on';
                
            elseif htypeData.Value == 1
                hraysS.Visible = 'off';
                hraysD.Visible = 'off';
                hraysStext.Visible = 'off';
                hraysDtext.Visible = 'off';
            end                
            previousTypeData = htypeData.Value;
        end
    end
    function changeTypeInv(varargin)
        if isempty(model)
            warndlg('Data not Loaded')
            htypeInv.Value = previousTypeInv;
            return
        end
        if htypeInv.Value ~= previousTypeInv
            % type was really changed
            if htypeInv.Value==1
                pdiff.Visible = 'off';
                psimult.Visible = 'on';
            else
                pdiff.Visible = 'on';
                psimult.Visible = 'off';
            end
            previousTypeInv = htypeInv.Value;
        end
    end

    function doColorbar(varargin)
        if hcolorbar.Value==1
            cl = [str2double(hcmin.String) str2double(hcmax.String)];
            haxes1.CLim = cl;
            haxes2.CLim = cl;
        else
            haxes1.CLimMode = 'auto';
            haxes2.CLimMode = 'auto';
        end
    end
    function setClim(src,varargin)
        if htypeData.Value==1
            if src==hcmin
                if str2double(src.String)>cmaxTT
                    warndlg({'Value should be smaller than max value',...
                        'Resetting value'})
                    src.String = num2str(cminTT);
                    return
                else
                    cminTT = str2double(src.String);
                end
            else
                if str2double(src.String)<cminTT
                    warndlg({'Value should be greater than min value',...
                        'Resetting value'})
                    src.String = num2str(cmaxTT);
                    return
                else
                    cmaxTT = str2double(src.String);
                end
            end
        else
            if src==hcmin
                if str2double(src.String)>cmaxAmp
                    warndlg({'Value should be smaller than max value',...
                        'Resetting value'})
                    src.String = num2str(cminAmp);
                    return
                else
                    cminAmp = str2double(src.String);
                end
            else
                if str2double(src.String)<cminAmp
                    warndlg({'Value should be greater than min value',...
                        'Resetting value'})
                    src.String = num2str(cmaxAmp);
                    return
                else
                    cmaxAmp = str2double(src.String);
                end
            end
        end
        if hcolorbar.Value==1
            doColorbar()
        end
    end
    function doMap(varargin)
        colormap(f, hcmap.String{hcmap.Value})
    end
    function showRef(varargin)
        if isempty(model)
            warndlg('Data not Loaded')
            return
        end
        if isempty(model.inv_res)
            warndlg('No Inversion Results Found For This Model')
            return
        end
        nf=figure;
        ax=axes('Parent',nf);
        if param.tomoAtt == 1
            gridViewer.plotTomo(model.inv_res(param.ref_inv_no).tomo.s,...
                'Reference Model: Attenuation','Distance [m]','Elevation [m]',ax)
        else
            gridViewer.plotTomo(1./model.inv_res(param.ref_inv_no).tomo.s,...
                'Reference Model: Velocity','Distance [m]','Elevation [m]',ax)
        end
        colorbar('peer', ax)
        colormap(ax,hcmap.String{hcmap.Value})
    end
end

