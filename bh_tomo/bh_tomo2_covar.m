function bh_tomo2_covar( varargin )
%BH_TOMO2_COVAR Adjust a covariance model

rep='';
file='';
if nargin>=2
    rep=varargin{1};
    file=varargin{2};
end

% Main variables

cm = CovarianceModel.empty;
cmUI = CovarianceUI.empty;
cmXiUI = CovarianceUI.empty;
cmTiltUI = CovarianceUI.empty;
data = [];
idata = [];
L = [];   % ray matrix
Cd = [];  % experimental covariance
xc = [];
modelNo = [];
model = [];
saved = true;
previousType = 1;

% UI stuff

fs = 11;
if nargin>=3
    fs = varargin{3};
elseif ispc
    fs = 9;
end
vScale = 1;
if ispc
    vScale = 0.81;
end


width = 1200;
height = 775*vScale;
% get screen size
su = get(groot,'Units');
set(groot,'Units','points')
scnsize = get(groot,'ScreenSize');
pos = [scnsize(3)/2-width/2 scnsize(4)/2-height/2 width height];
set(groot,'Units',su)       % Restore default root screen units

f = figure('Visible','off',...
    'Units','points',...
    'Position',pos,...
    'Tag','fig_bh_tomo2_covar',...
    'Name','bh_tomo_covar',...
    'NumberTitle','off',...
    'ToolBar','none',...,
    'MenuBar','None',...
    'SizeChangedFcn',@resizeUI,...
    'CloseRequestFcn',@closeWindow);


%
% Menu
%
hmenu = uimenu(f,'Label','File');
uimenu(hmenu,'Label','Open ...',...
    'Accelerator','O',...
    'Callback',@openFile);
uimenu(hmenu,'Label','Save',...
    'Accelerator','S',...
    'Callback',@saveFile);
uimenu(hmenu,'Label','Close',...
    'Separator','on',...
    'Accelerator','W',...
    'Callback',@closeWindow);

%
% Panels
%

pdata = uipanel(f,'Title','Data',...
    'Units','points',...
    'FontSize',fs+1);

nLines=6;
vSizeTot = nLines*22 + (nLines+1)*5;
vSize = 22/vSizeTot;
vSpace = 5/vSizeTot;

% Data

hpanelName = uicontrol('Style','text',...
    'String',' Cells',...
    'ForegroundColor','red',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.025 5*vSize+6*vSpace 0.3 vSize],...
    'Parent',pdata);
    
hNdata = uicontrol('Style','text',...
    'String',' Rays',...
    'ForegroundColor','red',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.025 4*vSize+5*vSpace 0.3 vSize],...
    'Parent',pdata);

hlistMog = uicontrol('Style','listbox',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.025 vSpace 0.3 4*vSize+4*vSpace],...
    'Parent',pdata);

uicontrol('Style','text',...
    'String','Curved Rays',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','right',...
    'Position',[0.35 vSpace 0.2 vSize],...
    'Parent',pdata);
hrays = uicontrol('Style','popupmenu',...
    'String','-',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.575 vSpace 0.4 vSize],...
    'Callback',@loadRays,...
    'Parent',pdata);

hTypeData = uicontrol('Style','popupmenu',...
    'String',{'Traveltime','Amplitude - Peak-to-Peak','Amplitude - Centroid Frequency'},...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.35 2*vSpace+vSize 0.3 vSize],...
    'Callback',@changeType,...
    'Parent',pdata);
uicontrol('Style','pushbutton',...
    'String','Show Stats',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.675 2*vSpace+vSize 0.3 vSize],...
    'Callback',@showStats,...
    'Parent',pdata);
hvariance = uicontrol('Style','checkbox',...
    'String','Include Experimental Variance',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.35 3*vSpace+2*vSize 0.625 vSize],...
    'Callback',@updateCov,...
    'Parent',pdata);
htilted = uicontrol('Style','checkbox',...
    'String','Tilted Elliptical Velocity Anisotropy',...
    'FontSize',fs,...
    'Enable','off',...
    'Units','normalized',...
    'Callback',@doTilted,...
    'Position',[0.35 4*vSpace+3*vSize 0.625 vSize],...
    'Parent',pdata);
helliptical = uicontrol('Style','checkbox',...
    'String','Elliptical Velocity Anisotropy',...
    'FontSize',fs,...
    'Units','normalized',...
    'Callback',@doElliptical,...
    'Position',[0.35 5*vSpace+4*vSize 0.625 vSize],...
    'Parent',pdata);
hvlim = uicontrol('Style','checkbox',...
    'String','Upper Limit - Apparent Velocity',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.35 6*vSpace+5*vSize 0.45 vSize],...
    'Callback',@loadData,...
    'Parent',pdata);
hvlimVal = uicontrol('Style','edit',...
    'String','0.15',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.825 6*vSpace+5*vSize 0.15 vSize],...
    'Parent',pdata);

% Model params

pcovModel = uipanel(f,'Title','Covariance Model',...
    'Units','points',...
    'FontSize',fs+1);

nLines=14;
vSizeTot = nLines*22 + (nLines+1)*5;
vSize = 22/vSizeTot;
vSpace = 5/vSizeTot;

hautoUpdate = uicontrol('Style','checkbox',...
    'String','Auto Update',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.1 vSpace 0.35 vSize],...
    'Parent',pcovModel);
uicontrol('Style','pushbutton',...
    'String','Compute',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.55 vSpace 0.35 vSize],...
    'Callback',@computeCov,...
    'Parent',pcovModel);

pnugget = uipanel(pcovModel,'Title','Nugget Effect',...
    'Units','normalized',...
    'Position',[0.025 2*vSpace+vSize 0.95 3*vSize],...
    'FontSize',fs);

pparams = uipanel(pcovModel,'Title','Parameters',...
    'Units','normalized',...
    'Position',[0.025 3*vSpace+4*vSize 0.95 11*vSize],...
    'FontSize',fs);

hstructList = uicontrol('Style','popupmenu',...
    'String','Structure no 1',...
    'FontSize',fs,...
    'Units','normalized',...
    'Callback',@chooseStruct,...
    'Position',[0.025 14*vSpace+13*vSize 0.3 vSize],...
    'Parent',pcovModel);
uicontrol('Style','pushbutton',...
    'String','Add Structure',...
    'FontSize',fs,...
    'Units','normalized',...
    'Callback',@addStruct,...
    'Position',[0.35 14*vSpace+13*vSize 0.3 vSize],...
    'Parent',pcovModel);
uicontrol('Style','pushbutton',...
    'String','Remove Structure',...
    'FontSize',fs,...
    'Units','normalized',...
    'Callback',@remStruct,...
    'Position',[0.675 14*vSpace+13*vSize 0.3 vSize],...
    'Parent',pcovModel);


hsillText = uicontrol('Style','text',...
    'String','Sill',...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Visible','off',...
    'Parent',pparams);
hthetaZtext = uicontrol('Style','text',...
    'String',[char(952),' Z'],...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Visible','off',...
    'Parent',pparams);
hthetaYtext = uicontrol('Style','text',...
    'String',[char(952),' Y'],...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Visible','off',...
    'Parent',pparams);
hthetaXtext = uicontrol('Style','text',...
    'String',[char(952),' X'],...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Visible','off',...
    'Parent',pparams);
hrangeZtext = uicontrol('Style','text',...
    'String','Range Z',...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Visible','off',...
    'Parent',pparams);
hrangeYtext = uicontrol('Style','text',...
    'String','Range Y',...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Visible','off',...
    'Parent',pparams);
hrangeXtext = uicontrol('Style','text',...
    'String','Range X',...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Visible','off',...
    'Parent',pparams);

nLines=10;
vSizeTot = nLines*22 + (nLines+1)*5;
vSize = 22/vSizeTot;
vSpace = 5/vSizeTot;
        
hvar = uicontrol('Style','text',...
    'String','Variable',...
    'FontSize',fs,...
    'HorizontalAlignment','center',...
    'BackgroundColor','white',...
    'Units','normalized',...
    'Position',[0.23 10*vSpace+9*vSize 0.23 vSize],...
    'Visible','off',...
    'Parent',pparams);
hxi = uicontrol('Style','text',...
    'String',char(958),...
    'FontSize',fs,...
    'HorizontalAlignment','center',...
    'BackgroundColor','white',...
    'Units','normalized',...
    'Position',[0.49 10*vSpace+9*vSize 0.23 vSize],...
    'Visible','off',...
    'Parent',pparams);
htilt = uicontrol('Style','text',...
    'String','Tile Angle',...
    'FontSize',fs,...
    'HorizontalAlignment','center',...
    'BackgroundColor','white',...
    'Units','normalized',...
    'Position',[0.74 10*vSpace+9*vSize 0.23 vSize],...
    'Visible','off',...
    'Parent',pparams);
hval1Text = uicontrol('Style','text',...
    'String','Value',...
    'FontSize',fs,...
    'HorizontalAlignment','center',...
    'Units','normalized',...
    'Position',[0.23 8*vSpace+7*vSize 0.15 vSize],...
    'Visible','off',...
    'Parent',pparams);
hfix1Text = uicontrol('Style','text',...
    'String','Fix',...
    'FontSize',fs,...
    'HorizontalAlignment','center',...
    'Units','normalized',...
    'Position',[0.39 8*vSpace+7*vSize 0.08 vSize],...
    'Visible','off',...
    'Parent',pparams);
hval2Text = uicontrol('Style','text',...
    'String','Value',...
    'FontSize',fs,...
    'HorizontalAlignment','center',...
    'Units','normalized',...
    'Position',[0.49 8*vSpace+7*vSize 0.15 vSize],...
    'Visible','off',...
    'Parent',pparams);
hfix2Text = uicontrol('Style','text',...
    'String','Fix',...
    'FontSize',fs,...
    'HorizontalAlignment','center',...
    'Units','normalized',...
    'Position',[0.65 8*vSpace+7*vSize 0.08 vSize],...
    'Visible','off',...
    'Parent',pparams);
hval3Text = uicontrol('Style','text',...
    'String','Value',...
    'FontSize',fs,...
    'HorizontalAlignment','center',...
    'Units','normalized',...
    'Position',[0.74 8*vSpace+7*vSize 0.15 vSize],...
    'Visible','off',...
    'Parent',pparams);
hfix3Text = uicontrol('Style','text',...
    'String','Fix',...
    'FontSize',fs,...
    'HorizontalAlignment','center',...
    'Units','normalized',...
    'Position',[0.9 8*vSpace+7*vSize 0.08 vSize],...
    'Visible','off',...
    'Parent',pparams);


nLines=2;
vSizeTot = nLines*22 + (nLines+1)*5;
vSize = 22/vSizeTot;
vSpace = 5/vSizeTot;

uicontrol('Style','text',...
    'String','Slowness',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','right',...
    'Position',[0.01 2*vSpace+vSize 0.25 vSize],...
    'Parent',pnugget);
hmodelNugget = uicontrol('Style','edit',...
    'String','0',...
    'FontSize',fs,...
    'Units','normalized',...
    'Callback',@updateCov,...
    'Position',[0.28 2*vSpace+vSize 0.15 vSize],...
    'Parent',pnugget);
hmodelNuggetFix = uicontrol('Style','checkbox',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.44 2*vSpace+vSize 0.05 vSize],...
    'Parent',pnugget);

uicontrol('Style','text',...
    'String','Traveltime',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','right',...
    'Position',[0.51 2*vSpace+vSize 0.25 vSize],...
    'Parent',pnugget);
httNugget = uicontrol('Style','edit',...
    'String','0',...
    'FontSize',fs,...
    'Units','normalized',...
    'Callback',@updateCov,...
    'Position',[0.78 2*vSpace+vSize 0.15 vSize],...
    'Parent',pnugget);
httNuggetFix = uicontrol('Style','checkbox',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.94 2*vSpace+vSize 0.05 vSize],...
    'Parent',pnugget);

hxiText = uicontrol('Style','text',...
    'String',char(958),...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','right',...
    'Visible','off',...
    'Position',[0.01 vSpace 0.25 vSize],...
    'Parent',pnugget);
hxiNugget = uicontrol('Style','edit',...
    'String','0',...
    'FontSize',fs,...
    'Units','normalized',...
    'Callback',@updateCov,...
    'Visible','off',...
    'Position',[0.28 vSpace 0.15 vSize],...
    'Parent',pnugget);
hxiNuggetFix = uicontrol('Style','checkbox',...
    'FontSize',fs,...
    'Units','normalized',...
    'Visible','off',...
    'Position',[0.44 vSpace 0.05 vSize],...
    'Parent',pnugget);
htiltText = uicontrol('Style','text',...
    'String','Tilt Angle',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','right',...
    'Visible','off',...
    'Position',[0.51 vSpace 0.25 vSize],...
    'Parent',pnugget);
htiltNugget = uicontrol('Style','edit',...
    'String','0',...
    'FontSize',fs,...
    'Units','normalized',...
    'Callback',@updateCov,...
    'Visible','off',...
    'Position',[0.78 vSpace 0.15 vSize],...
    'Parent',pnugget);
htiltNuggetFix = uicontrol('Style','checkbox',...
    'FontSize',fs,...
    'Units','normalized',...
    'Visible','off',...
    'Position',[0.94 vSpace 0.05 vSize],...
    'Parent',pnugget);



% Grid

nLines=3;
vSizeTot = nLines*22 + (nLines+1)*5;
vSize = 22/vSizeTot;
vSpace = 5/vSizeTot;


pgrid = uipanel(f,'Title','Grid',...
    'Units','points',...
    'FontSize',fs+1);

hncells = uicontrol('Style','text',...
    'String',' Cells',...
    'ForegroundColor','red',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.5 vSpace 0.5 vSize],...
    'Parent',pgrid);

uicontrol('Style','text',...
    'String','Max',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','right',...
    'Position',[0.005 vSpace 0.12 vSize],...
    'Parent',pgrid);
hxmax = uicontrol('Style','text',...
    'String','0',...
    'ForegroundColor','red',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.125 vSpace 0.12 vSize],...
    'Parent',pgrid);
hymax = uicontrol('Style','text',...
    'String','0',...
    'ForegroundColor','red',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.25 vSpace 0.12 vSize],...
    'Parent',pgrid);
hzmax = uicontrol('Style','text',...
    'String','0',...
    'ForegroundColor','red',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.375 vSpace 0.12 vSize],...
    'Parent',pgrid);

uicontrol('Style','text',...
    'String','Min',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','right',...
    'Position',[0.005 2*vSpace+vSize 0.12 vSize],...
    'Parent',pgrid);
hxmin = uicontrol('Style','text',...
    'String','0',...
    'ForegroundColor','red',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.125 2*vSpace+vSize 0.12 vSize],...
    'Parent',pgrid);
hymin = uicontrol('Style','text',...
    'String','0',...
    'ForegroundColor','red',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.25 2*vSpace+vSize 0.12 vSize],...
    'Parent',pgrid);
hzmin = uicontrol('Style','text',...
    'String','0',...
    'ForegroundColor','red',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.375 2*vSpace+vSize 0.12 vSize],...
    'Parent',pgrid);

uicontrol('Style','text',...
    'String','X',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.125 3*vSpace+2*vSize 0.12 vSize],...
    'Parent',pgrid);
uicontrol('Style','text',...
    'String','Y',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.25 3*vSpace+2*vSize 0.12 vSize],...
    'Parent',pgrid);
uicontrol('Style','text',...
    'String','Z',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.375 3*vSpace+2*vSize 0.12 vSize],...
    'Parent',pgrid);

uicontrol('Style','text',...
    'String','X',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.625 3*vSpace+2*vSize 0.12 vSize],...
    'Parent',pgrid);
uicontrol('Style','text',...
    'String','Y',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.75 3*vSpace+2*vSize 0.12 vSize],...
    'Parent',pgrid);
uicontrol('Style','text',...
    'String','Z',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','center',...
    'Position',[0.875 3*vSpace+2*vSize 0.12 vSize],...
    'Parent',pgrid);

uicontrol('Style','text',...
    'String','Step ',...
    'FontSize',fs,...
    'Units','normalized',...
    'HorizontalAlignment','right',...
    'Position',[0.49 2*vSpace+vSize 0.11 vSize],...
    'Parent',pgrid);
hdx = uicontrol('Style','edit',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.62 2*vSpace+vSize 0.12 vSize],...
    'Callback',@updateNcell,...
    'Parent',pgrid);
hdy = uicontrol('Style','edit',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.745 2*vSpace+vSize 0.12 vSize],...
    'Callback',@updateNcell,...
    'Parent',pgrid);
hdz = uicontrol('Style','edit',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.87 2*vSpace+vSize 0.12 vSize],...
    'Callback',@updateNcell,...
    'Parent',pgrid);



pfit = uipanel(f,'Title','Adjust Model (Simplex Method)',...
    'Units','points',...
    'FontSize',fs+1);

uicontrol('Style','text',...
    'String','Number of Iterations',...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Position',[0.05 vSpace 0.35 vSize],...
    'Parent',pfit)
uicontrol('Style','text',...
    'String','Fraction of Bins',...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Position',[0.05 2*vSpace+vSize 0.35 vSize],...
    'Parent',pfit)
uicontrol('Style','text',...
    'String','Bin Length',...
    'FontSize',fs,...
    'HorizontalAlignment','right',...
    'Units','normalized',...
    'Position',[0.05 3*vSpace+2*vSize 0.35 vSize],...
    'Parent',pfit)
hnumit = uicontrol('Style','edit',...
    'String','5',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.45 vSpace 0.25 vSize],...
    'Parent',pfit);
hfracbin = uicontrol('Style','edit',...
    'String','0.25',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.45 2*vSpace+vSize 0.25 vSize],...
    'Parent',pfit);
hbinlength = uicontrol('Style','edit',...
    'String','50',...
    'FontSize',fs,...
    'Units','normalized',...
    'Position',[0.45 3*vSpace+2*vSize 0.25 vSize],...
    'Parent',pfit);
uicontrol('Style','pushbutton',...
    'String','GO',...
    'FontSize',fs+1,...
    'Units','normalized',...
    'Position',[0.75 0.25 0.2 0.5],...
    'Callback',@fitModel,...
    'Parent',pfit);

haxes1 = axes('Units','points','Parent',f);
haxes2 = axes('Units','points','Parent',f);


f.Visible = 'on';

    function resizeUI(varargin)
        f.Visible = 'off';
        hBorder = 15;
        width = f.Position(3);
        height = f.Position(4);
        
        vFac = 1;
        if ispc
            vFac = 0.81*vFac;
        end
        vSize = 22*vFac;
        vSpace = 5*vFac;
        vBorder = 10*vFac;

        axBorder = haxes1.Position(2);

        hSize = 400;
        
        vSizeAx = (height-3*axBorder)/2;
        haxes1.Position = [axBorder axBorder width-hSize-2*axBorder-hBorder vSizeAx];
        haxes2.Position = [axBorder 2*axBorder+vSizeAx width-hSize-2*axBorder-hBorder vSizeAx];

        vSize2 = 6*vSize+7*vSpace;
        vPos = height-1.5*vBorder-vSize2;
        pdata.Position = [width-hSize-hBorder vPos hSize vSize2];
        
        vSize2 = 3*vSize+4*vSpace;
        vPos = vPos-vBorder-vSize2;
        pgrid.Position = [width-hSize-hBorder vPos hSize vSize2];
        
        vSize2 = 14*vSize+15*vSpace;
        vPos = vPos-vBorder-vSize2;
        pcovModel.Position = [width-hSize-hBorder vPos hSize vSize2];
        
        vSize2 = 3*vSize+4*vSpace;
        vPos = vPos-vBorder-vSize2;
        pfit.Position = [width-hSize-hBorder vPos hSize vSize2];
        
        f.Visible = 'on';
    end

    function closeWindow(varargin)
        if saved == false
            choice = questdlg('Database not saved, quit anyway?',...
                'bh_tomo_db',...
                'Don''t save','Cancel','Save','Save');
            switch choice
                case 'Don''t save'
                case 'Cancel'
                    return
                case 'Save'
                    saveFile()
            end
        end
        quitUI()
    end
    function quitUI(varargin)
        delete(f)
    end

    function fitModel(varargin)
        ix=1;
        x0=zeros(100,1);
        ns = numel(cm.covar);
        for n=1:ns
            for np=1:length(cmUI(n).range)
                if cmUI(n).fixRange(np)==0
                    x0(ix) = cm.covar(n).range(np);
                    ix = ix+1;
                end
            end
            for np=1:length(cmUI(n).angle)
                if cmUI(n).fixAngle(np)==0
                    x0(ix) = cm.covar(n).angle(np);
                    ix = ix+1;
                end
            end
            if cmUI(n).fixSill==0
                x0(ix) = cm.covar(n).sill;
                ix = ix+1;
            end
            
            if helliptical.Value==1
                for np=1:length(cmXiUI(n).range)
                    if cmXiUI(n).fixRange(np)==0
                        x0(ix) = cm.covar_xi(n).range(np);
                        ix = ix+1;
                    end
                end
                for np=1:length(cmXiUI(n).angle)
                    if cmXiUI(n).fixAngle(np)==0
                        x0(ix) = cm.covar_xi(n).angle(np);
                        ix = ix+1;
                    end
                end
                if cmXiUI(n).fixSill==0
                    x0(ix) = cm.covar_xi(n).sill;
                    ix = ix+1;
                end
                
                if htilted.Value==1
                    for np=1:length(cmTiltUI(n).range)
                        if cmTiltUI(n).fixRange(np)==0
                            x0(ix) = cm.covar_tilt(n).range(np);
                            ix = ix+1;
                        end
                    end
                    for np=1:length(cmTiltUI(n).angle)
                        if cmTiltUI(n).fixAngle(np)==0
                            x0(ix) = cm.covar_tilt(n).angle(np);
                            ix = ix+1;
                        end
                    end
                    if cmTiltUI(n).fixSill==0
                        x0(ix) = cm.covar_tilt(n).sill;
                        ix = ix+1;
                    end
                end
            end
        end
        if hmodelNuggetFix.Value==0
            x0(ix) = cm.nugget_m;
            ix = ix+1;
        end
        if httNuggetFix.Value==0
            x0(ix) = cm.nugget_d;
            ix = ix+1;
        end
        if hxiNuggetFix.Value==0 && helliptical.Value==1
            x0(ix) = cm.nugget_xi;
            ix = ix+1;
        end
        if htiltNuggetFix.Value==0 && htilted.Value==1
            x0(ix) = cm.nugget_tilt;
            ix = ix+1;
        end
            
        x0 = x0(1:ix-1);
        opts = optimset('TolX',1e-12,'TolFun',1e-12,...
            'MaxFunEvals',str2double(hnumit.String),...
            'Display','off');
        fminsearch(@fitCov,x0,opts);
        
        prev = hautoUpdate.Value;
        hautoUpdate.Value = 0;
        for n=1:ns
            cmUI(n).range = cm.covar(n).range;
            cmUI(n).angle = cm.covar(n).angle;
            cmUI(n).sill = cm.covar(n).sill;
            cmUI(n).refresh();
            if helliptical.Value==1
                cmXiUI(n).range = cm.covar_xi(n).range;
                cmXiUI(n).angle = cm.covar_xi(n).angle;
                cmXiUI(n).sill = cm.covar_xi(n).sill;
                cmXiUI(n).refresh();
                if htilted.Value==1
                    cmTiltUI(n).range = cm.covar_tilt(n).range;
                    cmTiltUI(n).angle = cm.covar_tilt(n).angle;
                    cmTiltUI(n).sill = cm.covar_tilt(n).sill;
                    cmTiltUI(n).refresh();
                end
            end
        end
        httNugget.String = num2str(cm.nugget_d);
        hmodelNugget.String = num2str(cm.nugget_m);
        hxiNugget.String = num2str(cm.nugget_xi);
        htiltNugget.String = num2str(cm.nugget_tilt);
        hautoUpdate.Value = prev;
        saved = false;
    end
    function openFile(varargin)
        [modelNo,file2,rep2] = chooseModel(rep,file);
        if isempty(modelNo)
            return
        end
        rep=rep2;
        file=file2;
        try
            load([rep,file],'models','names_mog')
        catch ME
            errordlg(ME.message)
            return
        end
        model = models(modelNo);
        if isempty(model.grid)
            errordlg('Grid not created, covariance cannot be computed')
            return
        end

        %
        % Reset UI
        %
        cla(haxes1)
        cla(haxes2)
        
        mname = cell(numel(model.mogs),1);
        for n=1:numel(model.mogs)
            mname{n} = names_mog{model.mogs(n)}; %#ok<USENS>
        end
        hlistMog.String = mname;
        hlistMog.Max = numel(model.mogs);
        hpanelName.String = [model.name,' - ',num2str(model.grid.getNumberOfCells()),...
            ' Cells'];
        
        nr = cell(1+numel(model.inv_res),1);
        nr{1} = '-';
        for n=1:numel(model.inv_res)
            nr{n+1} = [char( model.inv_res(n).name ), ', ',char( model.inv_res(n).tomo.date)];
        end
        hrays.String = nr;
        hrays.Value = 1;
        
        hTypeData.Value = 1;
        helliptical.Value = 0;
        hvlim.Value = 0;
        hvariance.Value = 0;
        hxmin.String = num2str(model.grid.grx(1));
        hxmax.String = num2str(model.grid.grx(end));
        hdx.String = num2str(model.grid.dx());
        if strcmp(model.grid.type, '3D')
            hymin.String = num2str(model.grid.gry(1));
            hymax.String = num2str(model.grid.gry(end));
            hdy.String = num2str(model.grid.dy());
            hdy.Enable = 'on';
            helliptical.Enable = 'off';
        else
            hymin.String = '0';
            hymax.String = '0';
            hdy.String = '0';            
            hdy.Enable = 'off';
            helliptical.Enable = 'on';
        end
        hzmin.String = num2str(model.grid.grz(1));
        hzmax.String = num2str(model.grid.grz(end));
        hdz.String = num2str(model.grid.dz());
        updateNcell()
        
        cm = model.tt_covar;
        hvar.String = 'Slowness';
        fillUI()
        loadData()
        
    end
    function saveFile(varargin)
        if isempty(model)
            return
        end
        load([rep,file],'models')
        switch hTypeData.Value
            case 1
                model.tt_covar = cm;
                model.tt_covar.use_c0 = hvariance.Value;
                model.tt_covar.use_xi = helliptical.Value;
                model.tt_covar.use_tilt = htilted.Value;
            otherwise
                model.amp_covar = cm;
                model.amp_covar.use_c0 = hvariance.Value;
        end
        models(modelNo) = model; %#ok<NASGU>
        save([rep,file],'models','-append')
        saved = true;
    end
    function showStats(varargin)
        if isempty(model)
            return
        end
        
        s = data(:,1)./sum(L,2);
        if hTypeData.Value==1
            s=1./s;
            name = 'App. Velocity';
        else
            name = 'App. Attenuation';
        end
        s0 = mean( s );
        vs = var( s );
        Tx = model.grid.Tx(idata,:);
        Rx = model.grid.Rx(idata,:);
        hyp = sqrt( sum((Tx-Rx).^2, 2) );
        dz = Tx(:,3)-Rx(:,3);
        theta = 180/pi*asin(dz./hyp);
        
        figure
        subplot(311)
        hist(s,30)
        title([name,': ',num2str(s0,3),' ',char(177),' ',num2str(vs,3)])
        subplot(312)
        plot(hyp,s,'+')
        xlabel('Straight Ray Length')
        ylabel(name)
        subplot(313)
        plot(theta,s,'+')
        xlabel('Straight Ray Angle')
        ylabel(name)
        
    end
    function [g,gt] = computeCov(varargin)
        
        Cm = cm.compute(xc,xc);
        
        if cm.use_xi==1
            if cm.use_tilt==1
                np = size(L,2)/2;
                l = sqrt(L(:,1:np).^2 + L(:,(np+1):end).^2);
                s0 = mean(data(:,1)./sum(l,2))+zeros(np,1);
                xi0 = ones(np,1)+0.001;    % add 1/1000 so that J_th ~= 0
                theta0 = zeros(np,1)+0.0044;  % add a quarter of a degree so that J_th ~= 0
                J = calculJ2(L, [s0; xi0; theta0]);
                Cm = J*Cm*J';
            else
                 np = size(L,2)/2;
                 l = sqrt(L(:,1:np).^2 + L(:,(np+1):end).^2);
                 s0 = mean(data(:,1)./sum(l,2))+zeros(np,1);
                 xi0 = ones(np,1);
                 J = calculJ(L, [s0; xi0]);
                 Cm = J*Cm*J';
            end
        else
            Cm = L*Cm*L';
        end
        if cm.use_c0==1
            % use exp variance
            c0 = data(:,2).^2;
            Cm = Cm + cm.nugget_d*diag(c0);
        else
            Cm = Cm + cm.nugget_d*eye(size(L,1));
        end
        
        [Cm,ind] = sort(Cm(:),1,'descend');
        lclas = str2double(hbinlength.String);
        afi = 1/str2double(hfracbin.String);
        
        gt = moy_bloc(Cm,lclas);
        ind0 = find(gt<Inf);
        gt = gt(ind0);

        g = Cd(ind);
        g = moy_bloc(g,lclas);
        g = g(ind0);

        N = round(length(g)/afi);
        g = g(1:N);
        gt = gt(1:N);

        gmin = min([g gt]);
        gmax = max([g gt]);
        plot(haxes1,g,gt,'o',[gmin gmax],[gmin gmax],':')
        xlabel(haxes1,'Experimental Covariance','FontSize',fs+2)
        ylabel(haxes1,'Model Covariance','FontSize',fs+2)
        haxes1.DataAspectRatio = [1 1 1];

        n1 = 1:length(gt);
        n2 = 1:length(g);
        plot(haxes2, n2,g,'+', n1,gt,'o')
        xlabel(haxes2,'Bin Number','FontSize',fs+1)
        ylabel(haxes2,'Covariance','FontSize',fs+1)
        h=legend(haxes2,'Experimental (C_d^*)','Model (GC_mG^T +C_0)');
        h.FontSize = fs+2;
    end
    function chooseStruct(varargin)
        
        current = hstructList.Value;
        ns = numel(cm.covar);
        for n=1:ns
            cmUI(ns).setVisible('off')
        end
        cmUI(current).setVisible('on')
        
        if ~isempty(cm.covar_xi) && helliptical.Value == 1
            for n=1:ns
                cmXiUI(ns).setVisible('off')
            end
            cmXiUI(current).setVisible('on')            
        end
        if ~isempty(cm.covar_tilt) && htilted.Value == 1
            for n=1:ns
                cmTiltUI(ns).setVisible('off')
            end
            cmTiltUI(current).setVisible('on')            
        end
    end
    function addStruct(varargin)
        if isempty(model)
            return
        end
        current = hstructList.Value;
        ns = numel(cm.covar)+1;
        names = hstructList.String;
        names{ns} = ['Structure no ',num2str(ns)];
        hstructList.String = names;
        hstructList.Value = ns;
        
        if strcmp(model.grid.type, '3D')
            cm.covar(ns) = CovarianceModels.getDefault3D();
            cmUI(ns) = CovarianceUI(cm.covar(ns).range, cm.covar(ns).angle, cm.covar(ns).sill,...
                true,...
                'Units','normalized',...
                'Position',[0.23 0.5*vSpace 0.23 7*vSize+8*vSpace],...
                'Parent',pparams);
        else
            cm.covar(ns) = CovarianceModels.getDefault2D();
            cmUI(ns) = CovarianceUI(cm.covar(ns).range, cm.covar(ns).angle, cm.covar(ns).sill,...
                true,...
                'Units','normalized',...
                'Position',[0.23 3.5*vSpace+3*vSize 0.23 4*vSize+5*vSpace],...
                'Parent',pparams);
        end
        cmUI(ns).createList('Units','normalized',...
            'Position',[0.23 9*vSpace+8*vSize 0.23 vSize],...
            'Parent',pparams);
        cmUI(ns).setType(cm.covar(ns).type);
        addlistener(cmUI(ns),'covarianceEdited',@updateCovPar);
        addlistener(cmUI(ns),'typeChanged',@changeCovType);
            
        cmUI(current).setVisible('off')
        cmUI(ns).setVisible('on')
        
        if ~isempty(cm.covar_xi)
            
            if strcmp(model.grid.type, '3D')
                cm.covar_xi(ns) = copy(cm.covar(ns));
                cmXiUI(ns) = CovarianceUI(cm.covar_xi(ns).range,...
                    cm.covar_xi(ns).angle, cm.covar_xi(ns).sill,...
                    true,...
                    'Units','normalized',...
                    'Position',[0.49 0.5*vSpace 0.23 7*vSize+8*vSpace],...
                    'Parent',pparams);
            else
                cm.covar_xi(ns) = copy(cm.covar(ns));
                cmXiUI(ns) = CovarianceUI(cm.covar_xi(ns).range,...
                    cm.covar_xi(ns).angle, cm.covar_xi(ns).sill,...
                    true,...
                    'Units','normalized',...
                    'Position',[0.49 3.5*vSpace+3*vSize 0.23 4*vSize+5*vSpace],...
                    'Parent',pparams);
            end
            cmXiUI(ns).createList('Units','normalized',...
                'Position',[0.49 9*vSpace+8*vSize 0.23 vSize],...
                'Parent',pparams);
            cmXiUI(ns).setType(cm.covar_xi(ns).type);
            addlistener(cmXiUI(ns),'covarianceEdited',@updateCovPar);
            addlistener(cmXiUI(ns),'typeChanged',@changeCovType);
        
            cmXiUI(current).setVisible('off')
            if helliptical.Value==1
                cmXiUI(ns).setVisible('on')
            else
                cmXiUI(ns).setVisible('off')
            end
        end
        
        if ~isempty(cm.covar_tilt)
            
            if strcmp(model.grid.type, '3D')
                cm.covar_tilt(ns) = copy(cm.covar(ns));
                cmTiltUI(ns) = CovarianceUI(cm.covar_tilt(ns).range,...
                    cm.covar_tilt(ns).angle, cm.covar_tilt(ns).sill,...
                    true,...
                    'Units','normalized',...
                    'Position',[0.74 0.5*vSpace 0.23 7*vSize+8*vSpace],...
                    'Parent',pparams);
            else
                cm.covar_tilt(ns) = copy(cm.covar(ns));
                cmTiltUI(ns) = CovarianceUI(cm.covar_tilt(ns).range,...
                    cm.covar_tilt(ns).angle, cm.covar_tilt(ns).sill,...
                    true,...
                    'Units','normalized',...
                    'Position',[0.74 3.5*vSpace+3*vSize 0.23 4*vSize+5*vSpace],...
                    'Parent',pparams);
            end
            cmTiltUI(ns).createList('Units','normalized',...
                'Position',[0.74 9*vSpace+8*vSize 0.23 vSize],...
                'Parent',pparams);
            cmTiltUI(ns).setType(cm.covar_tilt(ns).type);
            addlistener(cmTiltUI(ns),'covarianceEdited',@updateCovPar);
            addlistener(cmTiltUI(ns),'typeChanged',@changeCovType);
        
            cmTiltUI(current).setVisible('off')
            if htilted.Value==1
                cmTiltUI(ns).setVisible('on')
            else
                cmTiltUI(ns).setVisible('off')
            end
        end
        
        updateCov()
    end
    function remStruct(varargin)
        if isempty(model)
            return
        end
        current = hstructList.Value;
        ind = 1:numel(cm.covar) ~= current;
        
        names = cell(numel(cm.covar)-1,1);
        for n=1:numel(cm.covar)-1
            names{n} = ['Structure no ',num2str(n)];
        end
        hstructList.String = names;
        hstructList.Value = 1;
        
        delete(cmUI(current))
        cm.covar = cm.covar(ind);
        cmUI = cmUI(ind);
        cmUI(1).setVisible('on')
        if ~isempty(cm.covar_xi)
            delete(cmXiUI(current))
            cm.covar_xi = cm.covar_xi(ind);
            cmXiUI = cmXiUI(ind);
            if helliptical.Value==1
                cmXiUI(1).setVisible('on')
            else
                cmXiUI(1).setVisible('off')
            end
        end
        if ~isempty(cm.covar_tilt)
            delete(cmTiltUI(current))
            cm.covar_tilt = cm.covar_tilt(ind);
            cmTiltUI = cmTiltUI(ind);
            if htilted.Value==1
                cmTiltUI(1).setVisible('on')
            else
                cmTiltUI(1).setVisible('off')
            end
        end
        updateCov()
    end
    function updateCov(varargin)
        if isempty(cm)
            return
        end
        saved=false;
        cm.nugget_d = str2double(httNugget.String);
        cm.nugget_m = str2double(hmodelNugget.String);
        cm.nugget_xi = str2double(hxiNugget.String);
        cm.nugget_tilt = str2double(htiltNugget.String);
        if hautoUpdate.Value == 1
            computeCov();
        end
    end
    function updateCovPar(src,varargin)
        sNo = hstructList.Value;
        if src == cmUI(sNo)
            cm.covar(sNo).range = cmUI(sNo).range;
            cm.covar(sNo).angle = cmUI(sNo).angle;
            cm.covar(sNo).sill = cmUI(sNo).sill;
        elseif src == cmXiUI(sNo)
            cm.covar_xi(sNo).range = cmXiUI(sNo).range;
            cm.covar_xi(sNo).angle = cmXiUI(sNo).angle;
            cm.covar_xi(sNo).sill = cmXiUI(sNo).sill;
        elseif src == cmTiltUI(sNo)
            cm.covar_tilt(sNo).range = cmTiltUI(sNo).range;
            cm.covar_tilt(sNo).angle = cmTiltUI(sNo).angle;
            cm.covar_tilt(sNo).sill = cmTiltUI(sNo).sill;
        end
        updateCov()
    end
    function changeCovType(src,varargin)
        sNo = hstructList.Value;
        if src == cmUI(sNo)
            cm.covar(sNo) = CovarianceModels.buildCov(cmUI(sNo).getType(),...
                cmUI(sNo).range,cmUI(sNo).angle,cmUI(sNo).sill);
        elseif src == cmXiUI(sNo)
            cm.covar_xi(sNo) = CovarianceModels.buildCov(cmXiUI(sNo).getType(),...
                cmXiUI(sNo).range,cmXiUI(sNo).angle,cmXiUI(sNo).sill);
        elseif src == cmTiltUI(sNo)
            cm.covar_tilt(sNo) = CovarianceModels.buildCov(cmTiltUI(sNo).getType(),...
                cmTiltUI(sNo).range,cmTiltUI(sNo).angle,cmTiltUI(sNo).sill);
        end
        updateCov()
    end
    function updateNcell(varargin)
        % get coord of center of cells
        dx = str2double(hdx.String);
        dy = str2double(hdy.String);
        dz = str2double(hdz.String);
        xc = model.grid.getCellCenter(dx,dy,dz);

        nx=numel( str2double(hxmin.String):dx:str2double(hxmax.String) );
        if ~strcmp(hdy.String,'0')
            ny=numel( str2double(hymin.String):dy:str2double(hymax.String) );
        else
            ny=1;
        end
        nz=numel( str2double(hzmin.String):dz:str2double(hzmax.String) );
        hncells.String = [num2str(nx*ny*nz), ' Cells'];
        loadRays()
        updateCov()
    end

    function fillEllipticalUI()
        if helliptical.Value == 1
            hxi.Visible = 'on';
            hval2Text.Visible = 'on';
            hfix2Text.Visible = 'on';
            hxiText.Visible = 'on';
            hxiNugget.Visible = 'on';
            hxiNuggetFix.Visible = 'on';
            htilted.Enable = 'on';
            
            if isempty(cm.covar_xi)
                nStruct = numel(cm.covar);
                nLines = 10;
                vSizeTot = nLines*22 + (nLines+1)*5;
                vSize = 22/vSizeTot;
                vSpace = 5/vSizeTot;
                for n=1:nStruct
                    cm.covar_xi(n) = copy(cm.covar(n));
                    if strcmp(model.grid.type, '3D')
                        cmXiUI(n) = CovarianceUI(cm.covar_xi(n).range,...
                            cm.covar_xi(n).angle,...
                            cm.covar_xi(n).sill,...
                            true,...
                            'Units','normalized',...
                            'Position',[0.49 0.5*vSpace 0.23 7*vSize+8*vSpace],...
                            'Parent',pparams);
                    else
                        cmXiUI(n) = CovarianceUI(cm.covar_xi(n).range,...
                            cm.covar_xi(n).angle,...
                            cm.covar_xi(n).sill,...
                            true,...
                            'Units','normalized',...
                            'Position',[0.49 3.5*vSpace+3*vSize 0.23 4*vSize+5*vSpace],...
                            'Parent',pparams);
                    end
                    cmXiUI(n).createList('Units','normalized',...
                        'Position',[0.49 9*vSpace+8*vSize 0.23 vSize],...
                        'Parent',pparams);
                    cmXiUI(n).setVisible('off');
                    cmXiUI(n).setType(cm.covar_xi(n).type);
                    addlistener(cmXiUI(n),'covarianceEdited',@updateCovPar);
                    addlistener(cmXiUI(n),'typeChanged',@changeCovType);
                end
            end
            
            cmXiUI(hstructList.Value).setVisible('on');

        else
            hxi.Visible = 'off';
            hval2Text.Visible = 'off';
            hfix2Text.Visible = 'off';
            hval3Text.Visible = 'off';
            hfix3Text.Visible = 'off';
            hxiText.Visible = 'off';
            hxiNugget.Visible = 'off';
            hxiNuggetFix.Visible = 'off';
            htilted.Enable = 'off';
            htilted.Value = 0;
            htilt.Visible = 'off';
            htiltText.Visible = 'off';
            htiltNugget.Visible = 'off';
            htiltNuggetFix.Visible = 'off';
            if ~isempty(cmXiUI)
                for n=1:numel(cmXiUI)
                    cmXiUI(n).setVisible('off');
                end
            end
            if ~isempty(cmTiltUI)
                for n=1:numel(cmTiltUI)
                    cmTiltUI(n).setVisible('off');
                end
            end
        end
    end
    function doElliptical(varargin)
        cm.use_xi = helliptical.Value;
        fillEllipticalUI()
        loadRays()
        computeCd()
    end
    function fillTiltUI()
        if htilted.Value == 1
            htilt.Visible = 'on';
            hval3Text.Visible = 'on';
            hfix3Text.Visible = 'on';
            htiltText.Visible = 'on';
            htiltNugget.Visible = 'on';
            htiltNuggetFix.Visible = 'on';
            
            if isempty(cm.covar_tilt)
                nStruct = numel(cm.covar);
                nLines = 10;
                vSizeTot = nLines*22 + (nLines+1)*5;
                vSize = 22/vSizeTot;
                vSpace = 5/vSizeTot;
                for n=1:nStruct
                    cm.covar_tilt(n) = copy(cm.covar(n));
                    if strcmp(model.grid.type, '3D')
                        cmTiltUI(n) = CovarianceUI(cm.covar_tilt(n).range,...
                            cm.covar_tilt(n).angle,...
                            cm.covar_tilt(n).sill,...
                            true,...
                            'Units','normalized',...
                            'Position',[0.74 0.5*vSpace 0.23 7*vSize+8*vSpace],...
                            'Parent',pparams);
                    else
                        cmTiltUI(n) = CovarianceUI(cm.covar_tilt(n).range,...
                            cm.covar_tilt(n).angle,...
                            cm.covar_tilt(n).sill,...
                            true,...
                            'Units','normalized',...
                            'Position',[0.74 3.5*vSpace+3*vSize 0.23 4*vSize+5*vSpace],...
                            'Parent',pparams);
                    end
                    cmTiltUI(n).createList('Units','normalized',...
                        'Position',[0.74 9*vSpace+8*vSize 0.23 vSize],...
                        'Parent',pparams);
                    cmTiltUI(n).setVisible('off');
                    cmTiltUI(n).setType(cm.covar_tilt(n).type);
                    addlistener(cmTiltUI(n),'covarianceEdited',@updateCovPar);
                    addlistener(cmTiltUI(n),'typeChanged',@changeCovType);
                end
            end
            
            cmTiltUI(hstructList.Value).setVisible('on');

        else
            htilt.Visible = 'off';
            hval3Text.Visible = 'off';
            hfix3Text.Visible = 'off';
            htiltText.Visible = 'off';
            htiltNugget.Visible = 'off';
            htiltNuggetFix.Visible = 'off';
            if ~isempty(cmTiltUI)
                for n=1:numel(cmTiltUI)
                    cmTiltUI(n).setVisible('off');
                end
            end
        end
    end
    function doTilted(varargin)
        cm.use_tilt = htilted.Value;
        fillTiltUI()
        loadRays()
        computeCd()
    end
    function fillUI()
        
        delete(cmUI)
        delete(cmXiUI)
        delete(cmTiltUI)
        
        nLines = 10;
        vSizeTot = nLines*22 + (nLines+1)*5;
        vSize = 22/vSizeTot;
        vSpace = 5/vSizeTot;
        
        if strcmp(model.grid.type, '3D')
            hsillText.Position = [0.01 vSpace 0.21 vSize];
            hthetaZtext.Position = [0.01 2*vSpace+vSize 0.21 vSize];
            hthetaYtext.Position = [0.01 3*vSpace+2*vSize 0.21 vSize];
            hthetaXtext.Position = [0.01 4*vSpace+3*vSize 0.21 vSize];
            hrangeZtext.Position = [0.01 5*vSpace+4*vSize 0.21 vSize];
            hrangeYtext.Position = [0.01 6*vSpace+5*vSize 0.21 vSize];
            hrangeXtext.Position = [0.01 7*vSpace+6*vSize 0.21 vSize];
            hsillText.Visible = 'on';
            hthetaZtext.Visible = 'on';
            hthetaYtext.Visible = 'on';
            hthetaXtext.Visible = 'on';
            hrangeZtext.Visible = 'on';
            hrangeYtext.Visible = 'on';
            hrangeXtext.Visible = 'on';
        else
            hsillText.Position = [0.01 4*vSpace+3*vSize 0.21 vSize];
            hthetaXtext.Position = [0.01 5*vSpace+4*vSize 0.21 vSize];
            hrangeZtext.Position = [0.01 6*vSpace+5*vSize 0.21 vSize];
            hrangeXtext.Position = [0.01 7*vSpace+6*vSize 0.21 vSize];
            hsillText.Visible = 'on';
            hthetaZtext.Visible = 'off';
            hthetaYtext.Visible = 'off';
            hthetaXtext.Visible = 'on';
            hrangeZtext.Visible = 'on';
            hrangeYtext.Visible = 'off';
            hrangeXtext.Visible = 'on';
        end
        
        hval1Text.Visible = 'on';
        hfix1Text.Visible = 'on';
        hvar.Visible = 'on';
        
        if isempty(cm.covar)
            % create default
            names=cell(1,1);
            names{1} = 'Structure no 1';
            hstructList.String = names;
            
            if strcmp(model.grid.type, '3D')
                cm.covar = CovarianceModels.getDefault3D();
                cmUI = CovarianceUI(cm.covar.range, cm.covar.angle, cm.covar.sill,...
                    true,...
                    'Units','normalized',...
                    'Position',[0.23 0.5*vSpace 0.23 7*vSize+8*vSpace],...
                    'Parent',pparams);
            else
                cm.covar = CovarianceModels.getDefault2D();
                cmUI = CovarianceUI(cm.covar.range, cm.covar.angle, cm.covar.sill,...
                    true,...
                    'Units','normalized',...
                    'Position',[0.23 3.5*vSpace+3*vSize 0.23 4*vSize+5*vSpace],...
                    'Parent',pparams);
            end
            cm.covar_xi = Covariance.empty;
            cm.covar_tilt = Covariance.empty;
            cm.nugget_d = 0;
            cm.nugget_m = 0;
            cm.nugget_xi = 0;
            cm.nugget_tilt = 0;
            cm.use_c0 = 0;
            httNugget.String = num2str(cm.nugget_d);
            hmodelNugget.String = num2str(cm.nugget_m);
            hxiNugget.String = num2str(cm.nugget_xi);
            htiltNugget.String = num2str(cm.nugget_tilt);
            hvariance.Value = cm.use_c0;
            
            cmUI.createList('Units','normalized',...
                'Position',[0.23 9*vSpace+8*vSize 0.23 vSize],...
                'Parent',pparams);
            cmUI.setType(cm.covar.type);
            addlistener(cmUI,'covarianceEdited',@updateCovPar);
            addlistener(cmUI,'typeChanged',@changeCovType);
        else
            hstructList.Value = 1;
            nStruct = numel(cm.covar);
            sname = cell(nStruct,1);
            for n=1:nStruct
                sname{n} = ['Structure no ',num2str(n)];
                cmUI(n) = CovarianceUI(cm.covar(n).range, cm.covar.angle(n), cm.covar.sill(n),...
                    true,...
                    'Units','normalized',...
                    'Position',[0.23 3.5*vSpace+3*vSize 0.23 4*vSize+5*vSpace],...
                    'Parent',pparams);
                cmUI(n).setVisible('off');
                
                cmUI(n).createList('Units','normalized',...
                    'Position',[0.23 9*vSpace+8*vSize 0.23 vSize],...
                    'Parent',pparams);
                cmUI(n).setType(cm.covar(n).type);
                addlistener(cmUI(n),'covarianceEdited',@updateCovPar);
                addlistener(cmUI(n),'typeChanged',@changeCovType);
            end
            hstructList.String = sname;
            cmUI(1).setVisible('on');
            
            httNugget.String = num2str(cm.nugget_d);
            hmodelNugget.String = num2str(cm.nugget_m);
            hxiNugget.String = num2str(cm.nugget_xi);
            htiltNugget.String = num2str(cm.nugget_tilt);
            hvariance.Value = cm.use_c0;
            
            if ~isempty(cm.covar_xi)
                helliptical.Value=1;
                fillEllipticalUI()
                
                for n=1:nStruct
                    if strcmp(model.grid.type, '3D')
                        cmXiUI(n) = CovarianceUI(cm.covar_xi(n).range,...
                            cm.covar_xi(n).angle,...
                            cm.covar_xi(n).sill,...
                            true,...
                            'Units','normalized',...
                            'Position',[0.49 0.5*vSpace 0.23 7*vSize+8*vSpace],...
                        'Parent',pparams);
                    else
                        cmXiUI(n) = CovarianceUI(cm.covar_xi(n).range,...
                            cm.covar_xi(n).angle,...
                            cm.covar_xi(n).sill,...
                            true,...
                            'Units','normalized',...
                            'Position',[0.23 3.5*vSpace+3*vSize 0.23 4*vSize+5*vSpace],...
                        'Parent',pparams);
                    end
                    cmXiUI(n).createList('Units','normalized',...
                        'Position',[0.23 9*vSpace+8*vSize 0.23 vSize],...
                        'Parent',pparams);
                    cmXiUI(n).setType(cm.covar_xi(n).type);
                    cmXiUI(n).setVisible('off');
                    addlistener(cmXiUI(n),'covarianceEdited',@updateCovPar);
                    addlistener(cmXiUI(n),'typeChanged',@changeCovType);
                end
                cmXiUI(1).setVisible('on');
                
            else
                helliptical.Value=0;
                fillEllipticalUI()
                
            end
            if ~isempty(cm.covar_tilt)
                htilted.Value=1;
                fillTiltUI()
                
                for n=1:nStruct
                    if strcmp(model.grid.type, '3D')
                        cmTiltUI(n) = CovarianceUI(cm.covar_tilt(n).range, ...
                            cm.covar_tilt.angle(n), cm.covar_tilt.sill(n),...
                            true,...
                            'Units','normalized',...
                            'Position',[0.23 0.5*vSpace0 0.23 7*vSize+8*vSpace],...
                            'Parent',pparams);
                    else
                        cmTiltUI(n) = CovarianceUI(cm.covar_tilt(n).range, ...
                            cm.covar_tilt.angle(n), cm.covar_tilt.sill(n),...
                            true,...
                            'Units','normalized',...
                            'Position',[0.23 3.5*vSpace+3*vSize 0.23 4*vSize+5*vSpace],...
                            'Parent',pparams);
                    end
                    cmTiltUI(n).setVisible('off');
                    
                    cmTiltUI(n).createList('Units','normalized',...
                        'Position',[0.23 9*vSpace+8*vSize 0.23 vSize],...
                        'Parent',pparams);
                    cmTiltUI(n).setType(cm.covar_tilt(n).type);
                    addlistener(cmTiltUI(n),'covarianceEdited',@updateCovPar);
                    addlistener(cmTiltUI(n),'typeChanged',@changeCovType);
                end
                cmTiltUI(1).setVisible('on');
            else
                htilted.Value=0;
                fillTiltUI()
                
            end
        end
    end
    function changeType(varargin)
        if isempty(model)
            return
        end
        if hTypeData.Value ~= previousType
            % type was really changed
            if previousType == 1
                model.tt_covar = cm;
                cm = model.amp_covar;
                hvar.String = 'Attenuation';
            elseif hTypeData.Value == 1
                model.amp_covar = cm;
                cm = model.tt_covar;
                hvar.String = 'Slowness';
            end
            previousType = hTypeData.Value;
            fillUI()
            loadData()
        end
    end
    function loadData(varargin)
        selectedMogs = hlistMog.Value;
        if hvlim.Value==1 && hTypeData.Value==1
            vlim = str2double(hvlimVal.Sring);
        else
            vlim = [];
        end
        switch hTypeData.Value
            case 1
                type = 'tt';
            case 2
                type = 'amp';
            case 3
                type = 'fce';
        end
        [data,idata] = Model.getModelData(model,[rep,file],type,selectedMogs,vlim);
        hNdata.String = [num2str(size(data,1)),' Rays'];
        loadRays()
        computeCd()
    end
    function loadRays(varargin)
        aniso = helliptical.Value;
        if hrays.Value>1
            % curved rays
            
            % check if grid compatible
            if model.grid.checkCenter(model.inv_res(hrays.Value-1).tomo.x,...
                    model.inv_res(hrays.Value-1).tomo.y,...
                    model.inv_res(hrays.Value-1).tomo.z)==0
                errordlg({'Grid Not Compatible With Ray Matrix','Using Straight Rays'})
                    hrays.Value=1;
                    loadRays()
                    return
            end
            ndata=0;
            ind = zeros(size(data,1),1);
            for n=1:size(data,1)
                ii = find(model.inv_res(hrays.Value-1).tomo.no_trace == data(n,3));
                if isempty(ii)
                    errordlg({['Ray No ',num2str(data(n,3)),' Missing From Ray Matrix'],'Using Straight Rays'})
                    hrays.Value=1;
                    loadRays()
                    return
                else
                    ndata = ndata+1;
                    ind(ndata) = ii;
                end
            end
            ind = ind(1:ndata);
            L = model.inv_res(hrays.Value-1).tomo.L(ind,:);
        else
            % straight rays
            dx = str2double(hdx.String);
            dy = str2double(hdy.String);
            dz = str2double(hdz.String);
            L = model.grid.getForwardStraightRays(idata,dx,dy,dz,aniso);
        end
    end
    function computeCd(varargin)
        % Compute experimental covariance
        nt = size(L,1);
        if helliptical.Value==0
            s0 = mean(data(:,1)./sum(L,2));
            mta = s0*sum(L,2);  % mean traveltime
        else
            np = size(L,2)/2;
            l = sqrt(L(:,1:np).^2 + L(:,(np+1):end).^2);
            s0 = mean(data(:,1)./sum(l,2));
            mta = s0 * sum(l,2);
        end
        dt = data(:,1)-mta;
        Cd = reshape(dt*dt',nt^2,1);
    end

    function dif = fitCov(x0)
        
        ix=1;
        ns = numel(cm.covar);
        for n=1:ns
            for np=1:length(cmUI(n).range)
                if cmUI(n).fixRange(np)==0
                    cm.covar(n).range(np) = x0(ix);
                    ix = ix+1;
                end
            end
            for np=1:length(cmUI(n).angle)
                if cmUI(n).fixAngle(np)==0
                    cm.covar(n).angle(np) = x0(ix);
                    ix = ix+1;
                end
            end
            if cmUI(n).fixSill==0
                cm.covar(n).sill = x0(ix);
                ix = ix+1;
            end
            
            if helliptical.Value==1
                for np=1:length(cmXiUI(n).range)
                    if cmXiUI(n).fixRange(np)==0
                        cm.covar_xi(n).range(np) = x0(ix);
                        ix = ix+1;
                    end
                end
                for np=1:length(cmXiUI(n).angle)
                    if cmXiUI(n).fixAngle(np)==0
                        cm.covar_xi(n).angle(np) = x0(ix);
                        ix = ix+1;
                    end
                end
                if cmXiUI(n).fixSill==0
                    cm.covar_xi(n).sill = x0(ix);
                    ix = ix+1;
                end
                
                if htilted.Value==1
                    for np=1:length(cmTiltUI(n).range)
                        if cmTiltUI(n).fixRange(np)==0
                            cm.covar_tilt(n).range(np) = x0(ix);
                            ix = ix+1;
                        end
                    end
                    for np=1:length(cmTiltUI(n).angle)
                        if cmTiltUI(n).fixAngle(np)==0
                            cm.covar_tilt(n).angle(np) = x0(ix);
                            ix = ix+1;
                        end
                    end
                    if cmTiltUI(n).fixSill==0
                        cm.covar_tilt(n).sill = x0(ix);
                        ix = ix+1;
                    end
                end
            end
        end
        if hmodelNuggetFix.Value==0
            cm.nugget_m = x0(ix);
            ix = ix+1;
        end
        if httNuggetFix.Value==0
            cm.nugget_d = x0(ix);
            ix = ix+1;
        end
        if hxiNuggetFix.Value==0 && helliptical.Value==1
            cm.nugget_xi = x0(ix);
            ix = ix+1;
        end
        if htiltNuggetFix.Value==0 && htilted.Value==1
            cm.nugget_tilt = x0(ix);
        end
        
        [g,gt] = computeCov();
        
        q = fliplr((1:length(g)).^2);
        q = 1 + q./max(q);
        g = g(1:length(q));
        gt = gt(1:length(q));

        dif = sum((((gt-g).*q).^2));
    end
end

