/*
 *  AntennaCorrection.cpp
 *  ttRaisCourbes
 *
 *  Created by Bernard Giroux on 08-05-11.
 *  Copyright 2008 Bernard Giroux. All rights reserved.
 *
 */

/*
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */


#include <iostream>

#include "AntennaCorrection.h"

using namespace std;

AntennaCorrection::~AntennaCorrection() {}


const double Ramac_250::h_diam[] = {
    0.05,
    0.06,
    0.07,
    0.08,
    0.09,
    0.10,
    0.11,
    0.12,
    0.13,
    0.14,
    0.15,
0.16 };

const double Ramac_250::k_form[] = {
    2.0,
    4.0,
    6.0,
    8.0,
    10.0,
    12.0,
    14.0,
    16.0,
    18.0,
    20.0,
    22.0,
    24.0,
    26.0,
    28.0,
    30.0,
    32.0,
    34.0,
36.0 };

const double Ramac_250::slown_air[] = {
    3.6206491e+00,
    2.9941976e+00,
    2.8409918e+00,
    2.7884698e+00,
    2.7807395e+00,
    2.7677408e+00,
    2.7577434e+00,
    2.7568874e+00,
    2.7542931e+00,
    2.7545146e+00,
    2.7531614e+00,
    2.7542905e+00,
    4.3371925e+00,
    3.0216669e+00,
    2.8470273e+00,
    2.7914119e+00,
    2.7823625e+00,
    2.7785606e+00,
    2.7747264e+00,
    2.7706715e+00,
    2.7666214e+00,
    2.7666422e+00,
    2.7636428e+00,
    2.7632354e+00,
    4.5702629e+00,
    3.0015425e+00,
    2.8473698e+00,
    2.7958952e+00,
    2.7837180e+00,
    2.7801824e+00,
    2.7779686e+00,
    2.7753538e+00,
    2.7727420e+00,
    2.7696997e+00,
    2.7666969e+00,
    2.7632354e+00,
    4.7300242e+00,
    2.9955970e+00,
    2.8509150e+00,
    2.7973605e+00,
    2.7837180e+00,
    2.7801824e+00,
    2.7779686e+00,
    2.7753538e+00,
    2.7727420e+00,
    2.7696997e+00,
    2.7666969e+00,
    2.7632354e+00,
    4.8587200e+00,
    2.9804991e+00,
    2.8509150e+00,
    2.8056990e+00,
    2.7852241e+00,
    2.7801824e+00,
    2.7779686e+00,
    2.7753538e+00,
    2.7727420e+00,
    2.7696997e+00,
    2.7666969e+00,
    2.7666810e+00,
    4.9429065e+00,
    2.9726604e+00,
    2.8509150e+00,
    2.8073530e+00,
    2.7910923e+00,
    2.7801824e+00,
    2.7779686e+00,
    2.7753538e+00,
    2.7727420e+00,
    2.7714233e+00,
    2.7684190e+00,
    2.7713627e+00,
    4.9476766e+00,
    2.9621095e+00,
    2.8509150e+00,
    2.8106988e+00,
    2.7974876e+00,
    2.7815366e+00,
    2.7779686e+00,
    2.7753538e+00,
    2.7727420e+00,
    2.7746834e+00,
    2.7716758e+00,
    2.7803883e+00,
    4.8267321e+00,
    2.9621095e+00,
    2.8509150e+00,
    2.8106988e+00,
    2.8038750e+00,
    2.7848043e+00,
    2.7825868e+00,
    2.7793176e+00,
    2.7759983e+00,
    2.7792009e+00,
    2.7748337e+00,
    2.7820950e+00,
    4.8238637e+00,
    2.9572871e+00,
    2.8525164e+00,
    2.8106988e+00,
    2.8055281e+00,
    2.7925357e+00,
    2.7825868e+00,
    2.7833314e+00,
    2.7807124e+00,
    2.7851871e+00,
    2.7806564e+00,
    2.7850770e+00,
    4.7282484e+00,
    2.9518036e+00,
    2.8539314e+00,
    2.8136841e+00,
    2.8071461e+00,
    2.7940856e+00,
    2.7903120e+00,
    2.7892326e+00,
    2.7858612e+00,
    2.7868921e+00,
    2.7838709e+00,
    2.7865134e+00,
    4.5309746e+00,
    2.9424281e+00,
    2.8553308e+00,
    2.8136841e+00,
    2.8088720e+00,
    2.7957285e+00,
    2.7918606e+00,
    2.7908728e+00,
    2.7866076e+00,
    2.7898778e+00,
    2.7838709e+00,
    2.7881212e+00,
    4.5049904e+00,
    2.9424281e+00,
    2.8553308e+00,
    2.8136841e+00,
    2.8083273e+00,
    2.8018811e+00,
    2.7935023e+00,
    2.7940493e+00,
    2.7882464e+00,
    2.7915916e+00,
    2.7885654e+00,
    2.7897338e+00,
    4.4914738e+00,
    2.9424281e+00,
    2.8570354e+00,
    2.8136841e+00,
    2.8088720e+00,
    2.8018811e+00,
    2.7982068e+00,
    2.7955730e+00,
    2.7899530e+00,
    2.7930317e+00,
    2.7885654e+00,
    2.7911776e+00,
    4.4690699e+00,
    2.9424281e+00,
    2.8570354e+00,
    2.8136841e+00,
    2.8104967e+00,
    2.8036021e+00,
    2.7996499e+00,
    2.7987331e+00,
    2.7929422e+00,
    2.7946431e+00,
    2.7900039e+00,
    2.7911776e+00,
    4.4635656e+00,
    2.9395811e+00,
    2.8570354e+00,
    2.8136841e+00,
    2.8104967e+00,
    2.8052192e+00,
    2.7996499e+00,
    2.7987331e+00,
    2.7943823e+00,
    2.7946431e+00,
    2.7916136e+00,
    2.7911776e+00,
    4.4460450e+00,
    2.9383307e+00,
    2.8585082e+00,
    2.8136841e+00,
    2.8118552e+00,
    2.8066711e+00,
    2.8013698e+00,
    2.8003476e+00,
    2.7960994e+00,
    2.7977067e+00,
    2.7916136e+00,
    2.7911776e+00,
    4.4392672e+00,
    2.9383307e+00,
    2.8600635e+00,
    2.8136841e+00,
    2.8118552e+00,
    2.8066711e+00,
    2.8029857e+00,
    2.8017967e+00,
    2.7977125e+00,
    2.7977067e+00,
    2.7916136e+00,
    2.7911776e+00,
    4.4313460e+00,
    2.9383307e+00,
    2.8615615e+00,
    2.8136841e+00,
    2.8118552e+00,
    2.8066711e+00,
    2.8044363e+00,
    2.8017967e+00,
    2.7977125e+00,
    2.7977067e+00,
    2.7946738e+00,
2.7928946e+00 };

const double Ramac_250::slown_water[] = {
    3.9014496e+00,
    4.1581930e+00,
    4.3872664e+00,
    4.6422145e+00,
    4.8765389e+00,
    5.1284350e+00,
    5.3640506e+00,
    5.6204419e+00,
    5.8546306e+00,
    6.1073125e+00,
    6.3393933e+00,
    6.5931882e+00,
    5.3251723e+00,
    5.5873859e+00,
    5.8239396e+00,
    6.0794891e+00,
    6.3128501e+00,
    6.5715459e+00,
    6.8002025e+00,
    7.0601062e+00,
    7.2881421e+00,
    7.5410565e+00,
    7.7734477e+00,
    7.5888256e+00,
    5.8376123e+00,
    6.0985129e+00,
    6.3472290e+00,
    6.6130756e+00,
    6.8552092e+00,
    7.1138331e+00,
    7.3551636e+00,
    7.6068225e+00,
    7.8461978e+00,
    8.0968156e+00,
    8.3356741e+00,
    8.5844629e+00,
    6.0902691e+00,
    6.3573076e+00,
    6.6028549e+00,
    6.8580225e+00,
    7.1072482e+00,
    7.3626431e+00,
    7.6054727e+00,
    7.8544976e+00,
    8.1033953e+00,
    8.3471716e+00,
    8.5902185e+00,
    8.8354712e+00,
    6.2842039e+00,
    6.5502584e+00,
    6.8030982e+00,
    7.0593763e+00,
    7.3080673e+00,
    7.5599455e+00,
    7.8135660e+00,
    8.0618073e+00,
    8.2997683e+00,
    8.5532053e+00,
    8.7953453e+00,
    9.0370029e+00,
    6.4529704e+00,
    6.7165909e+00,
    6.9693557e+00,
    7.2280608e+00,
    7.4829972e+00,
    7.7352050e+00,
    7.9812670e+00,
    8.2342608e+00,
    8.4769797e+00,
    8.7251531e+00,
    8.9596093e+00,
    9.2038283e+00,
    6.5948769e+00,
    6.8566128e+00,
    7.1165956e+00,
    7.3747439e+00,
    7.6323184e+00,
    7.8893343e+00,
    8.1339118e+00,
    8.3819046e+00,
    8.6225345e+00,
    8.8681480e+00,
    9.1050360e+00,
    9.3473247e+00,
    6.7219131e+00,
    6.9844696e+00,
    7.2439355e+00,
    7.5081415e+00,
    7.7682934e+00,
    8.0192471e+00,
    8.2624261e+00,
    8.5123648e+00,
    8.7521189e+00,
    8.9968469e+00,
    9.2373420e+00,
    9.4865989e+00,
    6.8321967e+00,
    7.0967136e+00,
    7.3648496e+00,
    7.6283451e+00,
    7.8827806e+00,
    8.1354386e+00,
    8.3792320e+00,
    8.6290351e+00,
    8.8672323e+00,
    9.1213184e+00,
    9.3593370e+00,
    9.6002412e+00,
    6.9374861e+00,
    7.2081654e+00,
    7.4753656e+00,
    7.7314310e+00,
    7.9849953e+00,
    8.2422451e+00,
    8.4842794e+00,
    8.7336689e+00,
    8.9794029e+00,
    9.2276168e+00,
    9.4644707e+00,
    9.7062307e+00,
    7.0318349e+00,
    7.2993753e+00,
    7.5688895e+00,
    7.8277056e+00,
    8.0808847e+00,
    8.3358825e+00,
    8.5789403e+00,
    8.8312889e+00,
    9.0746548e+00,
    9.3273743e+00,
    9.5600020e+00,
    9.8132333e+00,
    7.1179813e+00,
    7.3952243e+00,
    7.6574091e+00,
    7.9208844e+00,
    8.1702991e+00,
    8.4254619e+00,
    8.6698167e+00,
    8.9297007e+00,
    9.1717454e+00,
    9.4171336e+00,
    9.6539423e+00,
    9.8990174e+00,
    7.1937569e+00,
    7.4729236e+00,
    7.7357771e+00,
    8.0011727e+00,
    8.2495782e+00,
    8.5090229e+00,
    8.7601300e+00,
    9.0135066e+00,
    9.2519040e+00,
    9.5037675e+00,
    9.7388909e+00,
    9.9865048e+00,
    7.2693149e+00,
    7.5479308e+00,
    7.8122471e+00,
    8.0769198e+00,
    8.3261413e+00,
    8.5865371e+00,
    8.8366486e+00,
    9.0893066e+00,
    9.3313087e+00,
    9.5795231e+00,
    9.8209637e+00,
    1.0064275e+01,
    7.3348278e+00,
    7.6159928e+00,
    7.8818467e+00,
    8.1465167e+00,
    8.4021818e+00,
    8.6588402e+00,
    8.9106209e+00,
    9.1651023e+00,
    9.4045891e+00,
    9.6520679e+00,
    9.8960124e+00,
    1.0137863e+01,
    7.3991203e+00,
    7.6796151e+00,
    7.9466026e+00,
    8.2200843e+00,
    8.4696749e+00,
    8.7308520e+00,
    8.9762318e+00,
    9.2373137e+00,
    9.4765930e+00,
    9.7295891e+00,
    9.9623364e+00,
    1.0205384e+01,
    7.4643401e+00,
    7.7447611e+00,
    8.0080239e+00,
    8.2792440e+00,
    8.5342832e+00,
    8.8012957e+00,
    9.0429677e+00,
    9.3008471e+00,
    9.5453831e+00,
    9.7921140e+00,
    1.0028959e+01,
    1.0266236e+01,
    7.5227106e+00,
    7.8020809e+00,
    8.0631022e+00,
    8.3389407e+00,
    8.5929679e+00,
    8.8603025e+00,
    9.1055353e+00,
    9.3593195e+00,
    9.6068021e+00,
    9.8511184e+00,
    1.0089723e+01,
1.0324764e+01 };

double Ramac_250::getSlowness(double k, double d, bool inWater) const {
    double s;
    
    // assuming constant increment in k_form & h_diam
    double dd = h_diam[1] - h_diam[0];
    size_t i = static_cast<size_t>( (d-h_diam[0])/dd );
    if ( d <= h_diam[0] ) { i = 0; }
    else if ( d >= h_diam[nd-1] ) { i = nd-2; }
    
    double dk = k_form[1] - k_form[0];
    size_t j = static_cast<size_t>( (k-k_form[0])/dk );
    if ( k <= k_form[0] ) { j = 0; }
    else if ( k >= k_form[nk-1] ) { j = nk-2; }
    
    const double *data;
    if (inWater)
        data = slown_water;
    else
        data = slown_air;
    
    double inv_denom = 1./(dd*dk);

    // bilinear interpolation
    s =  (k_form[j+1]-k)*(h_diam[i+1]-d) * inv_denom * data[i*nk+j];
    s += (k-k_form[j])  *(h_diam[i+1]-d) * inv_denom * data[i*nk+j+1];
    s += (k_form[j+1]-k)*(d-h_diam[i])   * inv_denom * data[(i+1)*nk+j];
    s += (k-k_form[j])  *(d-h_diam[i])   * inv_denom * data[(i+1)*nk+j+1];
    return s;
}
